"use strict";(self.webpackChunkjinge_material_site=self.webpackChunkjinge_material_site||[]).push([[8970],{1059:(e,n,t)=>{t.r(n),t.d(n,{PagePagination:()=>f});var o=t(4114),s=t(7421),r=t(7683);function i(e){const n=e;return[...(()=>{const t=(0,o.Qb)({[o.__]:{context:e[o.__].context,slots:{default:function(e){return[(()=>{const n=(0,o.az)("div",{class:"page-container-section"},(0,o.Eh)("p","采用分页的形式分隔长列表，每次只加载一个页面。"));return e[o.__].rootNodes.push(n),n})(),(()=>{const t=(0,o.az)("div",{class:"page-container-section"},(0,o.Eh)("h2","基础分页"),(0,o.Eh)("p","基础分页只包括页码按钮。"),...(()=>{const t=(0,o.Qb)({[o.__]:{context:e[o.__].context},title:"Basic",example:n._examples?.basic}),s=r.AA.create(t);return e[o.__].nonRootCompNodes.push(s),(0,o.KO)(s.__render())})());return e[o.__].rootNodes.push(t),t})(),(()=>{const t=(0,o.az)("div",{class:"page-container-section"},(0,o.Eh)("h2","完整分页"),(0,o.Eh)("p","完整分页包括页码按钮、每页个数选择、快速跳转页码以及展示数据总条数功能。每个功能都可以通过参数独立控制是否使用。"),...(()=>{const t=(0,o.Qb)({[o.__]:{context:e[o.__].context},title:"Full",example:n._examples?.full}),s=r.AA.create(t);return e[o.__].nonRootCompNodes.push(s),(0,o.KO)(s.__render())})());return e[o.__].rootNodes.push(t),t})(),(()=>{const t=(0,o.az)("div",{class:"page-container-section"},(0,o.Eh)("h2","禁用分页"),(0,o.Eh)("p","有两种情况需要禁用(Disabled)分页，某些需求下需要禁用整个分页，或当正在加载某一页的数据时提示用该页正在加载并且禁用分页以避免重复提交。\n                        后者是业务中最常见的情况。为此，提供了",(0,o.Eh)("code","disabled"),"和",(0,o.Eh)("code","loadingPage"),"两个参数。请参看",(0,o.Eh)("code","表格（Table）"),"组件\n                        的示例中，有一个完整的分页组件和表格展示搭配的例子。"),...(()=>{const t=(0,o.Qb)({[o.__]:{context:e[o.__].context},title:"Disabled",example:n._examples?.disabled}),s=r.AA.create(t);return e[o.__].nonRootCompNodes.push(s),(0,o.KO)(s.__render())})(),...(()=>{const t=(0,o.Qb)({[o.__]:{context:e[o.__].context,slots:{props:function(e){return[...(()=>{const t=(0,o.Qb)({[o.__]:{context:e[o.__].context},headings:void 0,props:void 0}),s=()=>{t.headings=n.api?.full?.props?.headings};s(),n[o.$$].__watch(["api","full","props","headings"],s,e[o.$$]);const i=()=>{t.props=n.api?.full?.props?.props};i(),n[o.$$].__watch(["api","full","props","props"],i,e[o.$$]);const a=r.FG.create(t);return e[o.__].rootNodes.push(a),(0,o.KO)(a.__render())})()]},events:function(e){return[...(()=>{const t=(0,o.Qb)({[o.__]:{context:e[o.__].context},headings:void 0,props:void 0}),s=()=>{t.headings=n.api?.full?.events?.headings};s(),n[o.$$].__watch(["api","full","events","headings"],s,e[o.$$]);const i=()=>{t.props=n.api?.full?.events?.props};i(),n[o.$$].__watch(["api","full","events","props"],i,e[o.$$]);const a=r.FG.create(t);return e[o.__].rootNodes.push(a),(0,o.KO)(a.__render())})()]}}},title:"API - md-paginaition"}),s=r.IA.create(t);return e[o.__].nonRootCompNodes.push(s),(0,o.KO)(s.__render())})());return e[o.__].rootNodes.push(t),t})(),(()=>{const t=(0,o.az)("div",{class:"page-container-section"},(0,o.Eh)("h2","只支持[第一页/上一页/下一页]的轻量分页"),(0,o.Eh)("p","轻量分页组件用于不统计总页码，使用游标（cursor）来进行分页的情况。\n                        多用于数据量很大需要高效分页的情形，这类情况下会牺牲一定的用户体验来换取性能，\n                        比如无法直观看到总页码，也不能随意跳转到任意页码。"),...(()=>{const t=(0,o.Qb)({[o.__]:{context:e[o.__].context},title:"Lightweight",example:n._examples?.light}),s=r.AA.create(t);return e[o.__].nonRootCompNodes.push(s),(0,o.KO)(s.__render())})(),...(()=>{const t=(0,o.Qb)({[o.__]:{context:e[o.__].context,slots:{props:function(e){return[...(()=>{const t=(0,o.Qb)({[o.__]:{context:e[o.__].context},headings:void 0,props:void 0}),s=()=>{t.headings=n.api?.light?.props?.headings};s(),n[o.$$].__watch(["api","light","props","headings"],s,e[o.$$]);const i=()=>{t.props=n.api?.light?.props?.props};i(),n[o.$$].__watch(["api","light","props","props"],i,e[o.$$]);const a=r.FG.create(t);return e[o.__].rootNodes.push(a),(0,o.KO)(a.__render())})()]},events:function(e){return[...(()=>{const t=(0,o.Qb)({[o.__]:{context:e[o.__].context},headings:void 0,props:void 0}),s=()=>{t.headings=n.api?.light?.events?.headings};s(),n[o.$$].__watch(["api","light","events","headings"],s,e[o.$$]);const i=()=>{t.props=n.api?.light?.events?.props};i(),n[o.$$].__watch(["api","light","events","props"],i,e[o.$$]);const a=r.FG.create(t);return e[o.__].rootNodes.push(a),(0,o.KO)(a.__render())})()]}}},title:"API - md-light-paginaition"}),s=r.IA.create(t);return e[o.__].nonRootCompNodes.push(s),(0,o.KO)(s.__render())})());return e[o.__].rootNodes.push(t),t})()]}}},centered:!0,title:"分页"}),s=r._z.create(t);return e[o.__].rootNodes.push(s),(0,o.KO)(s.__render())})()]}var a=t(8260);class p extends o.wA{onPaginationChanged(e,n){console.log("pagi:",e,n)}}p.template=function(e){const n=e;return[...(()=>{const t=(0,o.Qb)({[o.__]:{context:e[o.__].context,listeners:{change:{fn:function(...e){n.onPaginationChanged(...e)},opts:null}}},showTotal:!0,pageSizeOptions:!0,currentPage:"6",totalSize:400}),s=a.t.create(t);return e[o.__].rootNodes.push(s),(0,o.KO)(s.__render())})()]};const l={ts:"import { Component } from 'jinge';\n\nimport _tpl from './basic.html';\n\nexport default class ExamplePaginationBasic extends Component {\n  static template = _tpl;\n\n  onPaginationChanged(currentPage: number, pageSize: number) {\n    // eslint-disable-next-line no-console\n    console.log('pagi:', currentPage, pageSize);\n  }\n}\n",sass:"",html:'<md-pagination\n  on:change="onPaginationChanged"\n  showTotal\n  pageSizeOptions\n  currentPage="6"\n  e:totalSize="400"\n/>'};class c extends o.wA{constructor(e){super(e);const n=this[o.$$].proxy;n.sizeOptions=(0,o.vm)([10,50,100,200]),n.totalSize=1e3+(1e3*Math.random()|0)}onPaginationChanged(e,n){console.log("pagi:",e,n)}}c.template=function(e){const n=e;return[(()=>{const n=(0,o.Eh)("p","使用默认的每页个数选择器列表：");return e[o.__].rootNodes.push(n),n})(),...(()=>{const t=(0,o.Qb)({[o.__]:{context:e[o.__].context,listeners:{change:{fn:function(...e){n.onPaginationChanged(...e)},opts:null}}},totalSize:void 0,currentPage:10,pageSizeOptions:!0,useJumper:!0,showTotal:!0}),s=()=>{t.totalSize=n.totalSize};s(),n[o.$$].__watch(["totalSize"],s,e[o.$$]);const r=a.t.create(t);return e[o.__].rootNodes.push(r),(0,o.KO)(r.__render())})(),(()=>{const n=(0,o.Eh)("p","使用自定义的每页个数选择器列表：");return e[o.__].rootNodes.push(n),n})(),...(()=>{const t=(0,o.Qb)({[o.__]:{context:e[o.__].context,listeners:{change:{fn:function(...e){n.onPaginationChanged(...e)},opts:null}}},totalSize:void 0,currentPage:void 0,pageSizeOptions:void 0,pageSize:100,useJumper:!0,showTotal:!0}),s=()=>{t.totalSize=n.totalSize};s(),n[o.$$].__watch(["totalSize"],s,e[o.$$]);const r=()=>{t.currentPage=n.currentPage};r(),n[o.$$].__watch(["currentPage"],r,e[o.$$]);const i=()=>{t.pageSizeOptions=n.sizeOptions};i(),n[o.$$].__watch(["sizeOptions"],i,e[o.$$]);const p=a.t.create(t);return e[o.__].rootNodes.push(p),(0,o.KO)(p.__render())})()]};const u={ts:"import { Attributes, Component, vm } from 'jinge';\n\nimport _tpl from './full.html';\n\nexport default class ExamplePaginationFull extends Component {\n  static template = _tpl;\n\n  onPaginationChanged(currentPage: number, pageSize: number) {\n    // eslint-disable-next-line no-console\n    console.log('pagi:', currentPage, pageSize);\n  }\n\n  sizeOptions: number[];\n  totalSize: number;\n\n  constructor(attrs: Attributes) {\n    super(attrs);\n    this.sizeOptions = vm([10, 50, 100, 200]);\n    this.totalSize = ((Math.random() * 1000) | 0) + 1000;\n  }\n}\n",sass:"",html:'<p>使用默认的每页个数选择器列表：</p>\n<md-pagination\n  on:change="onPaginationChanged"\n  e:totalSize="totalSize"\n  e:currentPage="10"\n  pageSizeOptions\n  useJumper\n  showTotal\n/>\n<p>使用自定义的每页个数选择器列表：</p>\n<md-pagination\n  on:change="onPaginationChanged"\n  e:totalSize="totalSize"\n  e:pageSize="100"\n  e:currentPage="currentPage"\n  e:pageSizeOptions="sizeOptions"\n  useJumper\n  showTotal\n/>\n'};class g extends o.wA{onPaginationChanged(e,n){console.log("pagi:",e,n)}}g.template=function(e){const n=e;return[(()=>{const n=(0,o.Eh)("p","禁用整个分页组件：");return e[o.__].rootNodes.push(n),n})(),...(()=>{const t=(0,o.Qb)({[o.__]:{context:e[o.__].context,listeners:{change:{fn:function(...e){n.onPaginationChanged(...e)},opts:null}}},disabled:!0,totalSize:130}),s=a.t.create(t);return e[o.__].rootNodes.push(s),(0,o.KO)(s.__render())})(),(()=>{const n=(0,o.Eh)("p","提示正在加载某页：");return e[o.__].rootNodes.push(n),n})(),...(()=>{const t=(0,o.Qb)({[o.__]:{context:e[o.__].context,listeners:{change:{fn:function(...e){n.onPaginationChanged(...e)},opts:null}}},loadingPage:4,totalSize:130,pageSizeOptions:!0,useJumper:!0}),s=a.t.create(t);return e[o.__].rootNodes.push(s),(0,o.KO)(s.__render())})()]};const d={ts:"import { Component } from 'jinge';\n\nimport _tpl from './disabled.html';\n\nexport default class ExamplePaginationDisabled extends Component {\n  static template = _tpl;\n\n  onPaginationChanged(currentPage: number, pageSize: number) {\n    // eslint-disable-next-line no-console\n    console.log('pagi:', currentPage, pageSize);\n  }\n}\n",sass:"",html:'<p>禁用整个分页组件：</p>\n<md-pagination\n  disabled\n  on:change="onPaginationChanged"\n  e:totalSize="130"\n/>\n<p>提示正在加载某页：</p>\n<md-pagination\n  on:change="onPaginationChanged"\n  e:loadingPage="4"\n  e:totalSize="130"\n  pageSizeOptions\n  useJumper\n/>\n'};var _=t(8279);class h extends o.wA{constructor(e){super(e);const n=this[o.$$].proxy;n.loading=!1,n.pageSize=10,n.cursors=(0,o.vm)([]),n.list=null}__afterRender(){this.request(null,this.pageSize)}request(e,n){this.loading=!0,function(e,n){const t=Number(e||"0"),o=t+n>50?null:(t+n).toString(),s=new Array(n).fill(0).map(((e,n)=>String.fromCharCode(65+n+t)));return new Promise((e=>{setTimeout((()=>e({nextCursor:o,list:s})),2e3)}))}(e,n).then((e=>{this.cursors.push(e.nextCursor||null),this.list=(0,o.vm)(e.list),this.loading=!1}))}onPaginationChanged(e,n){this.pageSize=n,this.request(e,n)}reset(){this.cursors.length=0,this.pageSize=10,this.request(null,10)}}h.template=function(e){const n=e;return[(()=>{const t=(0,o.Eh)("p",...(()=>{const t=(0,o.Qb)({[o.__]:{context:e[o.__].context,slots:{default:function(e){const n=e;return[(()=>{const t=(0,o.Eh)("span",(()=>{const t=(0,o.Eg)(),s=()=>{(0,o.Hd)(t,n.each)};return s(),n[o.$$].__watch(["each"],s,e[o.$$]),t})());return e[o.__].rootNodes.push(t),t})()]}}},loop:void 0}),s=()=>{t.loop=n.list};s(),n[o.$$].__watch(["list"],s,e[o.$$]);const r=o.YQ.create(t);return e[o.__].nonRootCompNodes.push(r),(0,o.KO)(r.__render())})());return e[o.__].rootNodes.push(t),t})(),...(()=>{const t=(0,o.Qb)({[o.__]:{context:e[o.__].context,listeners:{change:{fn:function(...e){n.onPaginationChanged(...e)},opts:null}}},loading:void 0,cursors:void 0,pageSize:void 0,pageSizeOptions:!0}),s=()=>{t.loading=n.loading};s(),n[o.$$].__watch(["loading"],s,e[o.$$]);const r=()=>{t.cursors=n.cursors};r(),n[o.$$].__watch(["cursors"],r,e[o.$$]);const i=()=>{t.pageSize=n.pageSize};i(),n[o.$$].__watch(["pageSize"],i,e[o.$$]);const p=a.z.create(t);return e[o.__].rootNodes.push(p),(0,o.KO)(p.__render())})(),(()=>{const t=(0,o.Eh)("p",...(()=>{const t=(0,o.Qb)({[o.__]:{context:e[o.__].context,listeners:{click:{fn:function(...e){n.reset(...e)},opts:null}},slots:{default:function(e){return[(0,o.xc)(e,"Reset")]}}},class:"md-primary md-raised"}),s=_.z.create(t);return e[o.__].nonRootCompNodes.push(s),(0,o.KO)(s.__render())})());return e[o.__].rootNodes.push(t),t})()]};const m={ts:"import { Attributes, Component, vm } from 'jinge';\n\nimport _tpl from './light.html';\n\nfunction mockApi(currentCursor: string, pageSize: number) {\n  const idx = Number(currentCursor || '0');\n  const nextCursor = idx + pageSize > 50 ? null : (idx + pageSize).toString();\n  const list = new Array(pageSize).fill(0).map((n, i) => {\n    return String.fromCharCode(65 + i + idx);\n  });\n  return new Promise<{\n    nextCursor: string;\n    list: string[];\n  }>((resolve) => {\n    setTimeout(\n      () =>\n        resolve({\n          nextCursor,\n          list,\n        }),\n      2000,\n    );\n  });\n}\n\nexport default class ExamplePaginationLight extends Component {\n  static template = _tpl;\n\n  loading: boolean;\n  pageSize: number;\n  cursors: string[];\n  list: string[];\n\n  constructor(attrs: Attributes) {\n    super(attrs);\n    this.loading = false;\n    this.pageSize = 10;\n    this.cursors = vm([]);\n    this.list = null;\n  }\n\n  __afterRender() {\n    this.request(null, this.pageSize);\n  }\n\n  request(cursor: string, pageSize: number) {\n    this.loading = true;\n    mockApi(cursor, pageSize).then((result) => {\n      this.cursors.push(result.nextCursor || null);\n      this.list = vm(result.list);\n      this.loading = false;\n    });\n  }\n\n  onPaginationChanged(cursor: string, pageSize: number) {\n    this.pageSize = pageSize;\n    this.request(cursor, pageSize);\n  }\n\n  reset() {\n    this.cursors.length = 0;\n    this.pageSize = 10;\n    this.request(null, 10);\n  }\n}\n",sass:"",html:'<p>\n  <for e:loop="list" vm:each="n">\n    <span>${n}</span>\n  </for>\n</p>\n<md-light-pagination\n  on:change="onPaginationChanged"\n  e:pageSizeOptions="true"\n  e:loading="loading"\n  e:cursors="cursors"\n  e:pageSize="pageSize"\n/>\n<p>\n  <md-button class="md-primary md-raised" on:click="reset">Reset</md-button>\n</p>'};class f extends o.wA{constructor(e){super(e);const n=this[o.$$].proxy;(0,s.v7)(n,(()=>{n.api=(0,o.vm)({full:{props:{headings:["名称","描述","默认值"],props:[{name:"totalSize",type:"Number|String",description:"数据总量。",defaults:"0"},{name:"pageSize",type:"Number/String",description:"每页的数据量。",defaults:"10"},{name:"pageSizeOptions",type:"Array<Number>|Boolean",description:"是否启用每页数量选择器。指定为具体的数组，则使用自定义的选项；指定为 true 使用默认的选项。",defaults:"false"},{name:"currentPage",type:"Number/String",description:"设置当前页号。页码从 1 开始计数。",defaults:"1"},{name:"itemCount",type:"Number/String",description:"设置最大页码导航按钮数量。",defaults:"7"},{name:"useJumper",type:"Boolean",description:"启用页码快速跳转功能",defaults:"false"},{name:"showTotal",type:"Boolean",description:"展示数据总量的提示信息。",defaults:"false"},{name:"disabled",type:"Boolean",description:"禁用整个分页组件。",defaults:"false"},{name:"loadingPage",type:"Number/String",description:"指定正在加载的页码。如果该属性值大于 0，则会禁用整个分页组件，并在正在加载的页码按钮上展示 md-pinner。",defaults:"0"},{name:"hideOnSinglePage",type:"Boolean",description:"当计算出来的总页码数量小于等于 1 时，隐藏分页组件。",defaults:"false"}]},events:{headings:["名称","描述","参数"],props:[{name:"change",description:"当分页参数（包括当前页码和每页数据量）发生变化时触发。",value:"(currentPage, pageSize)"}]}},light:{props:{headings:["名称","描述","默认值"],props:[{name:"cursors",type:"Array<string|number|null>",description:"游标数组，如果最后一个元素为 null，则说明已经到最后一页。",defaults:"an empty array"},{name:"pageSize",type:"Number/String",description:"每页的数据量。",defaults:"10"},{name:"pageSizeOptions",type:"Array<Number>|Boolean",description:"是否启用每页数量选择器。指定为具体的数组，则使用自定义的选项；指定为 true 使用默认的选项。",defaults:"false"},{name:"disabled",type:"Boolean",description:"禁用整个分页组件。",defaults:"false"},{name:"hideSinglePage",type:"Boolean",description:"当总页码数量等于 1 时（游标数组仅有一个 null 元素），隐藏分页组件。",defaults:"false"}]},events:{headings:["名称","描述","参数"],props:[{name:"change",description:"当分页参数（包括当前游标和每页数据量）发生变化时触发。",value:"(cursor, pageSize)"}]}}})}),!0),n._examples={basic:{component:p,source:l},full:{component:c,source:u},disabled:{component:g,source:d},light:{component:h,source:m}}}static get template(){return i}}}}]);