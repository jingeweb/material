{"version":3,"file":"js/src_pages_getting-started_ts-jinge-material_lib_snackbar_style_index_css-jinge-material_lib_t-2a91a3.js","mappings":";;;;;;;;;;;;;;;AAA0B;AAET;AAEV,MAAM,2BAA2B,4CAAS,CAAC;AAElD;AAFa,mBACJ,WAAW,6DAAI;;;;;;;;;;;;;;;;;;ACLuP;AACjL;AACsC;AACpI,6BAAe,oCAAS;AACxB;AACA;AACA;AACA,kBAAkB,4CAAY;AAC9B,OAAO,qCAAS;AAChB;AACA,2BAA2B,qCAAS;AACpC;AACA;AACA;AACA;AACA,yBAAyB,oDAAoB;AAC7C;AACA;AACA;AACA,iBAAiB;AACjB,gBAAgB,oDAAoB;AACpC;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,gBAAgB,gEAAgC;AAChD;AACA;AACA;AACA;AACA,gCAAgC,4CAAY;AAC5C,qBAAqB,qCAAS;AAC9B;AACA,yCAAyC,qCAAS;AAClD;AACA;AACA;AACA,0BAA0B,mDAAmB;AAC7C;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,mBAAmB;AACnB,6BAA6B,yDAAuB;AACpD,4BAA4B,qCAAS;AACrC,yBAAyB,0DAA0B;AACnD,iBAAiB;AACjB;AACA,wBAAwB,qCAAS;AACjC;AACA,aAAa;AACb;AACA,yBAAyB,oDAAoB;AAC7C;AACA;AACA;AACA,iBAAiB;AACjB,gBAAgB,oDAAoB;AACpC;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,gBAAgB,gEAAgC;AAChD;AACA;AACA;AACA;AACA,gCAAgC,4CAAY;AAC5C,qBAAqB,qCAAS;AAC9B;AACA,yCAAyC,qCAAS;AAClD;AACA;AACA;AACA;AACA,uCAAuC,gEAAgC;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,qCAAS;AAC/C;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,qBAAqB;AACrB;AACA,mBAAmB;AACnB,6BAA6B,yDAAuB;AACpD,4BAA4B,qCAAS;AACrC,yBAAyB,0DAA0B;AACnD,iBAAiB;AACjB;AACA,wBAAwB,qCAAS;AACjC;AACA,aAAa;AACb;AACA,yBAAyB,oDAAoB;AAC7C;AACA;AACA;AACA,iBAAiB;AACjB,gBAAgB,oDAAoB;AACpC;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,gBAAgB,gEAAgC;AAChD;AACA;AACA;AACA;AACA,gCAAgC,4CAAY;AAC5C,qBAAqB,qCAAS;AAC9B;AACA,yCAAyC,qCAAS;AAClD;AACA;AACA;AACA;AACA,uCAAuC,gEAAgC;AACvE;AACA;AACA,8CAA8C,sDAAsD;AACpG,8CAA8C,YAAY;AAC1D,8CAA8C,gBAAgB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD,+CAA+C;AAC/C;AACA,2CAA2C;AAC3C;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA,sCAAsC,qCAAS;AAC/C;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,mBAAmB;AACnB,6BAA6B,yDAAuB;AACpD,4BAA4B,qCAAS;AACrC,yBAAyB,0DAA0B;AACnD,iBAAiB;AACjB;AACA,wBAAwB,qCAAS;AACjC;AACA,aAAa;AACb;AACA,yBAAyB,oDAAoB;AAC7C;AACA;AACA;AACA,iBAAiB;AACjB,gBAAgB,oDAAoB;AACpC;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,gBAAgB,gEAAgC;AAChD;AACA;AACA;AACA;AACA,gCAAgC,4CAAY;AAC5C,qBAAqB,qCAAS;AAC9B;AACA,yCAAyC,qCAAS;AAClD;AACA;AACA;AACA;AACA,uCAAuC,gEAAgC;AACvE;AACA;AACA;AACA;AACA,+CAA+C,YAAY;AAC3D;AACA;AACA;AACA,sCAAsC,qCAAS;AAC/C;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,qBAAqB;AACrB;AACA,mBAAmB;AACnB,6BAA6B,yDAAuB;AACpD,4BAA4B,qCAAS;AACrC,yBAAyB,0DAA0B;AACnD,iBAAiB;AACjB,gBAAgB,gEAAgC;AAChD;AACA;AACA;AACA;AACA,kCAAkC,4CAAY;AAC9C,uBAAuB,qCAAS;AAChC;AACA,2CAA2C,qCAAS;AACpD;AACA;AACA;AACA,4BAA4B,mDAAmB;AAC/C;AACA;AACA;AACA,uBAAuB;AACvB;AACA,qBAAqB;AACrB,+BAA+B,oEAA8C;AAC7E,8BAA8B,qCAAS;AACvC,2BAA2B,0DAA0B;AACrD,mBAAmB;AACnB;AACA;AACA,kCAAkC,4CAAY;AAC9C,uBAAuB,qCAAS;AAChC;AACA,2CAA2C,qCAAS;AACpD;AACA;AACA;AACA,4BAA4B,mDAAmB;AAC/C;AACA;AACA;AACA,uBAAuB;AACvB;AACA,qBAAqB;AACrB,+BAA+B,oEAA8C;AAC7E,8BAA8B,qCAAS;AACvC,2BAA2B,0DAA0B;AACrD,mBAAmB;AACnB;AACA;AACA,gBAAgB,gEAAgC;AAChD;AACA;AACA,kBAAkB,gEAAgC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,4CAAY;AAC5C,qBAAqB,qCAAS;AAC9B;AACA,yCAAyC,qCAAS;AAClD;AACA;AACA;AACA;AACA,uCAAuC,gEAAgC;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,qCAAS;AAC/C;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,qBAAqB;AACrB;AACA,mBAAmB;AACnB,6BAA6B,yDAAuB;AACpD,4BAA4B,qCAAS;AACrC,yBAAyB,0DAA0B;AACnD,iBAAiB;AACjB,gBAAgB,gEAAgC;AAChD;AACA;AACA,kBAAkB,gEAAgC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,4CAAY;AAC5C,qBAAqB,qCAAS;AAC9B;AACA,yCAAyC,qCAAS;AAClD;AACA;AACA;AACA;AACA,uCAAuC,gEAAgC;AACvE;AACA;AACA,+CAA+C,WAAW;AAC1D,sDAAsD,WAAW;AACjE;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA,sCAAsC,qCAAS;AAC/C;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,qBAAqB;AACrB;AACA,mBAAmB;AACnB,6BAA6B,yDAAuB;AACpD,4BAA4B,qCAAS;AACrC,yBAAyB,0DAA0B;AACnD,iBAAiB;AACjB,gBAAgB,gEAAgC;AAChD;AACA;AACA,kBAAkB,gEAAgC;AAClD;AACA;AACA;AACA;AACA;AACA,kBAAkB,gEAAgC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qCAAS;AACjC;AACA,aAAa;AACb;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS,qCAAS,oCAAoC,qCAAS;AAC/D,eAAe,6DAA2B;AAC1C,cAAc,qCAAS;AACvB,WAAW,0DAA0B;AACrC,GAAG;AACH;AACA","sources":["webpack://jinge-material-site/./src/pages/getting-started.ts","webpack://jinge-material-site/./src/pages/getting-started.html"],"sourcesContent":["import { Component } from 'jinge';\n\nimport _tpl from './getting-started.html';\n\nexport class PageGettingStarted extends Component {\n  static template = _tpl;\n}\n","import {  attrs as attrs_jg0402, __ as ___jg0402, createElement as createElement_jg0402, createElementWithoutAttrs as createElementWithoutAttrs_jg0402, textRenderFn as textRenderFn_jg0402, assertRenderResults as assertRenderResults_jg0402, $$ as $$_jg0402 } from 'jinge';\nimport { RouterLinkComponent as RouterLinkComponent_jg0812_4dc9538ef393 } from 'jinge-router';\nimport { PageContainer as PageContainer_jg0801, CodeBlock as CodeBlock_jg0801, NoteBlock as NoteBlock_jg0801 } from '../components';\nexport default function(component) {\n  const vm_0 = component;\n  return [\n  ...(() => {\n    const attrs = attrs_jg0402({\n      [___jg0402]: {\n        debugName: \"attrs_of_<PageContainer>\",\n        context: component[___jg0402].context,\n        slots: {\n          'default': function(component) {\n            return [\n            (() => {\n              const el = createElement_jg0402(\n                \"section\",\n                {\n                  class: `page-container-section`\n                },\n                createElement_jg0402(\n                  \"h2\",\n                  {\n                    class: `md-headline`\n                  },\n                  `Jinge Material`\n                ),\n                createElementWithoutAttrs_jg0402(\n                  \"p\",\n                  `Jinge Material 是构建在 jinge 框架上的 Material Design 组件库，此处假设你已经知道如何搭建基本的 jinge 框架的项目，比如如何在 webpack 中配置和使用 jinge-loader。`\n                ),\n                ...(() => {\n                  const attrs = attrs_jg0402({\n                    [___jg0402]: {\n                      debugName: \"attrs_of_<NoteBlock>\",\n                      context: component[___jg0402].context,\n                      slots: {\n                        'default': function(component) {\n                          return [\n                          textRenderFn_jg0402(component, `jinge 框架还处于实验性的阶段，也还几乎没有文档。此处的 Jinge Material 组件库的文档也不保证有效。\n                                因此，体验 jinge 框架和 Jinge Material 组件库的最佳方式是直接克隆 Jinge Material 的源码仓库。\n                                这个仓库包含了所有组件的源码，以及一个涵盖所有组件的使用示例的完整应用（也就是你现在看到的这个网站）。`)\n                          ];\n                        }\n                      }\n                    },\n                  });\n                  const el = NoteBlock_jg0801.create(attrs);\n                  component[___jg0402].nonRootCompNodes.push(el);\n                  return assertRenderResults_jg0402(el.__render());\n                })()\n              );\n              component[___jg0402].rootNodes.push(el);\n              return el;\n            })(),\n            (() => {\n              const el = createElement_jg0402(\n                \"section\",\n                {\n                  class: `page-container-section`\n                },\n                createElement_jg0402(\n                  \"h2\",\n                  {\n                    class: `md-title`\n                  },\n                  `安装`\n                ),\n                createElementWithoutAttrs_jg0402(\n                  \"p\",\n                  `要使用 Jinge Material 组件库，需要先通过 npm 或 yarn 的方式安装：`\n                ),\n                ...(() => {\n                  const attrs = attrs_jg0402({\n                    [___jg0402]: {\n                      debugName: \"attrs_of_<CodeBlock>\",\n                      context: component[___jg0402].context,\n                      slots: {\n                        'default': function(component) {\n                          return [\n                          (() => {\n                            const el = createElementWithoutAttrs_jg0402(\n                              \"code\",\n                              `\n                                      npm install --save jinge-material jinge-material-icons\n                                      yarn add jinge-material jinge-material-icons\n                                    `\n                            );\n                            component[___jg0402].rootNodes.push(el);\n                            return el;\n                          })()\n                          ];\n                        }\n                      }\n                    },\n                    lang: `bash`\n                  });\n                  const el = CodeBlock_jg0801.create(attrs);\n                  component[___jg0402].nonRootCompNodes.push(el);\n                  return assertRenderResults_jg0402(el.__render());\n                })()\n              );\n              component[___jg0402].rootNodes.push(el);\n              return el;\n            })(),\n            (() => {\n              const el = createElement_jg0402(\n                \"section\",\n                {\n                  class: `page-container-section`\n                },\n                createElement_jg0402(\n                  \"h2\",\n                  {\n                    class: `md-title`\n                  },\n                  `配置 Webpack`\n                ),\n                createElementWithoutAttrs_jg0402(\n                  \"p\",\n                  `在 webpack.config.js 中需要配置使用 jinge 框架提供的模板和组件编译器，并注册相关的组件别名：`\n                ),\n                ...(() => {\n                  const attrs = attrs_jg0402({\n                    [___jg0402]: {\n                      debugName: \"attrs_of_<CodeBlock>\",\n                      context: component[___jg0402].context,\n                      slots: {\n                        'default': function(component) {\n                          return [\n                          (() => {\n                            const el = createElementWithoutAttrs_jg0402(\n                              \"code\",\n                              `\n                                      const { JingeComponentLoader, getJingeTemplateRuleWithAlias } = require('jinge-compiler');\n                                      const { IconAlias } = require('jinge-material-icons/compiler');\n                                      const { MaterialAlias } = require('jinge-material/compiler');\n                                      module.exports = {\n                                        module: {\n                                          rules: [ {\n                                            test: /\\.ts$/,\n                                            use: [\n                                              JingeComponentLoader,\n                                              {\n                                                loader: 'esbuild-loader',\n                                                options: {\n                                                  loader: 'ts',\n                                                  charset: 'utf8',\n                                                },\n                                              },\n                                            ],\n                                          },\n                                          getJingeTemplateRuleWithAlias({\n                                            ...MaterialAlias,\n                                            ...IconAlias\n                                          }) ]\n                                        }\n                                      }\n                                    `\n                            );\n                            component[___jg0402].rootNodes.push(el);\n                            return el;\n                          })()\n                          ];\n                        }\n                      }\n                    },\n                    lang: `ts`,\n                    height: `630`\n                  });\n                  const el = CodeBlock_jg0801.create(attrs);\n                  component[___jg0402].nonRootCompNodes.push(el);\n                  return assertRenderResults_jg0402(el.__render());\n                })()\n              );\n              component[___jg0402].rootNodes.push(el);\n              return el;\n            })(),\n            (() => {\n              const el = createElement_jg0402(\n                \"section\",\n                {\n                  class: `page-container-section`\n                },\n                createElement_jg0402(\n                  \"h2\",\n                  {\n                    class: `md-title`\n                  },\n                  `使用`\n                ),\n                createElementWithoutAttrs_jg0402(\n                  \"p\",\n                  `在项目的入口文件中，需要指定组件库默认的语言，并同时引入主题包。`\n                ),\n                ...(() => {\n                  const attrs = attrs_jg0402({\n                    [___jg0402]: {\n                      debugName: \"attrs_of_<CodeBlock>\",\n                      context: component[___jg0402].context,\n                      slots: {\n                        'default': function(component) {\n                          return [\n                          (() => {\n                            const el = createElementWithoutAttrs_jg0402(\n                              \"code\",\n                              `\n                                      import 'jinge-material/style/themes/default.css';\n                                      import zhCN from 'jinge-material/locales/zh_cn';\n                                      import { setLocale } from 'jinge-material/config';\n                                      setLocale(zhCN);\n                                    `\n                            );\n                            component[___jg0402].rootNodes.push(el);\n                            return el;\n                          })()\n                          ];\n                        }\n                      }\n                    },\n                    lang: `ts`\n                  });\n                  const el = CodeBlock_jg0801.create(attrs);\n                  component[___jg0402].nonRootCompNodes.push(el);\n                  return assertRenderResults_jg0402(el.__render());\n                })(),\n                createElementWithoutAttrs_jg0402(\n                  \"p\",\n                  `Jinge Material 组件库支持多种样式主题和多种语言，但没有默认的样式或语言。因此，只使用一种样式或语言也需要先主动注册资源。\n                        如果项目需要支持多种主题和语言，参看`,\n                  ...(() => {\n                    const attrs = attrs_jg0402({\n                      [___jg0402]: {\n                        debugName: \"attrs_of_<router-link>\",\n                        context: component[___jg0402].context,\n                        slots: {\n                          'default': function(component) {\n                            return [\n                            textRenderFn_jg0402(component, `国际化`)\n                            ];\n                          }\n                        }\n                      },\n                      to: `i18n`\n                    });\n                    const el = RouterLinkComponent_jg0812_4dc9538ef393.create(attrs);\n                    component[___jg0402].nonRootCompNodes.push(el);\n                    return assertRenderResults_jg0402(el.__render());\n                  })(),\n                  `和`,\n                  ...(() => {\n                    const attrs = attrs_jg0402({\n                      [___jg0402]: {\n                        debugName: \"attrs_of_<router-link>\",\n                        context: component[___jg0402].context,\n                        slots: {\n                          'default': function(component) {\n                            return [\n                            textRenderFn_jg0402(component, `主题`)\n                            ];\n                          }\n                        }\n                      },\n                      to: `theme`\n                    });\n                    const el = RouterLinkComponent_jg0812_4dc9538ef393.create(attrs);\n                    component[___jg0402].nonRootCompNodes.push(el);\n                    return assertRenderResults_jg0402(el.__render());\n                  })(),\n                  `章节。`\n                ),\n                createElementWithoutAttrs_jg0402(\n                  \"p\",\n                  `在模板 html 文件中，可以直接使用`,\n                  createElementWithoutAttrs_jg0402(\n                    \"code\",\n                    `md-[component]`\n                  ),\n                  `这样格式的别名：`\n                ),\n                ...(() => {\n                  const attrs = attrs_jg0402({\n                    [___jg0402]: {\n                      debugName: \"attrs_of_<CodeBlock>\",\n                      context: component[___jg0402].context,\n                      slots: {\n                        'default': function(component) {\n                          return [\n                          (() => {\n                            const el = createElementWithoutAttrs_jg0402(\n                              \"code\",\n                              `\n                                      <div>\n                                        <md-button>Click Me</md-button>\n                                        <md-icon-home/>\n                                      </div>\n                                    `\n                            );\n                            component[___jg0402].rootNodes.push(el);\n                            return el;\n                          })()\n                          ];\n                        }\n                      }\n                    },\n                    lang: `html`\n                  });\n                  const el = CodeBlock_jg0801.create(attrs);\n                  component[___jg0402].nonRootCompNodes.push(el);\n                  return assertRenderResults_jg0402(el.__render());\n                })(),\n                createElementWithoutAttrs_jg0402(\n                  \"p\",\n                  `在 js/ts 文件中，可直接使用`,\n                  createElementWithoutAttrs_jg0402(\n                    \"code\",\n                    `Snackbar`\n                  ),\n                  `等组件：`\n                ),\n                ...(() => {\n                  const attrs = attrs_jg0402({\n                    [___jg0402]: {\n                      debugName: \"attrs_of_<CodeBlock>\",\n                      context: component[___jg0402].context,\n                      slots: {\n                        'default': function(component) {\n                          return [\n                          (() => {\n                            const el = createElementWithoutAttrs_jg0402(\n                              \"code\",\n                              `\n                                      import { Snackbar } from 'jinge-material/lib/snackbar';\n                                      // 不推荐 import { Snackbar } from 'jinge-material' 的写法。\n                                      Snackbar.show({\n                                        message: '你好，世界！',\n                                        duration: 1500,\n                                      });\n                                    `\n                            );\n                            component[___jg0402].rootNodes.push(el);\n                            return el;\n                          })()\n                          ];\n                        }\n                      }\n                    },\n                    lang: `ts`\n                  });\n                  const el = CodeBlock_jg0801.create(attrs);\n                  component[___jg0402].nonRootCompNodes.push(el);\n                  return assertRenderResults_jg0402(el.__render());\n                })(),\n                createElementWithoutAttrs_jg0402(\n                  \"p\",\n                  `需要注意的是，我们推荐引用`,\n                  createElementWithoutAttrs_jg0402(\n                    \"code\",\n                    `jinge-material/lib`\n                  ),\n                  `目录下的组件，\n                        而不是直接从`,\n                  createElementWithoutAttrs_jg0402(\n                    \"code\",\n                    `jinge-material`\n                  ),\n                  `中引入，以达到按需引用的目标，加快构建速度。`\n                )\n              );\n              component[___jg0402].rootNodes.push(el);\n              return el;\n            })()\n            ];\n          }\n        }\n      },\n      title: undefined,\n      centered: true\n    });\n    const fn_0 = () => {\n      attrs.title = vm_0.快速上手;\n    };\n    fn_0();\n    vm_0[$$_jg0402].__watch([\"快速上手\"], fn_0, component[$$_jg0402]);\n    const el = PageContainer_jg0801.create(attrs);\n    component[___jg0402].rootNodes.push(el);\n    return assertRenderResults_jg0402(el.__render());\n  })()\n  ];\n}"],"names":[],"sourceRoot":""}