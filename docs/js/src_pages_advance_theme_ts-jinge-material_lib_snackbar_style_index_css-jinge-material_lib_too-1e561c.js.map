{"version":3,"file":"js/src_pages_advance_theme_ts-jinge-material_lib_snackbar_style_index_css-jinge-material_lib_too-1e561c.js","mappings":";;;;;;;;;;;;;;;AAA0B;AAET;AAEV,MAAM,kBAAkB,4CAAS,CAAC;AAEzC;AAFa,UACJ,WAAW,mDAAI;;;;;;;;;;;;;;;;;;ACLsO;AAChK;AACyC;AACvI,6BAAe,oCAAS;AACxB;AACA;AACA;AACA,kBAAkB,4CAAY;AAC9B,OAAO,qCAAS;AAChB;AACA,2BAA2B,qCAAS;AACpC;AACA;AACA;AACA;AACA,yBAAyB,oDAAoB;AAC7C;AACA;AACA;AACA,iBAAiB;AACjB,gBAAgB,oDAAoB;AACpC;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,gBAAgB,gEAAgC;AAChD;AACA;AACA;AACA,kCAAkC,4CAAY;AAC9C,uBAAuB,qCAAS;AAChC;AACA,2CAA2C,qCAAS;AACpD;AACA;AACA;AACA,4BAA4B,mDAAmB;AAC/C;AACA;AACA;AACA,uBAAuB;AACvB;AACA,qBAAqB;AACrB,+BAA+B,oEAA8C;AAC7E,8BAA8B,qCAAS;AACvC,2BAA2B,0DAA0B;AACrD,mBAAmB;AACnB;AACA;AACA,gBAAgB,gEAAgC;AAChD;AACA,kBAAkB,gEAAgC;AAClD;AACA;AACA;AACA,kBAAkB,gEAAgC;AAClD;AACA;AACA;AACA;AACA;AACA,wBAAwB,qCAAS;AACjC;AACA,aAAa;AACb;AACA,yBAAyB,oDAAoB;AAC7C;AACA;AACA;AACA,iBAAiB;AACjB,gBAAgB,oDAAoB;AACpC;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,gBAAgB,gEAAgC;AAChD;AACA;AACA;AACA,kBAAkB,gEAAgC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,4CAAY;AAC5C,qBAAqB,qCAAS;AAC9B;AACA,yCAAyC,qCAAS;AAClD;AACA;AACA;AACA;AACA,uCAAuC,gEAAgC;AACvE;AACA;AACA;AACA;AACA;AACA,sCAAsC,qCAAS;AAC/C;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,qBAAqB;AACrB;AACA,mBAAmB;AACnB,6BAA6B,yDAAuB;AACpD,4BAA4B,qCAAS;AACrC,yBAAyB,0DAA0B;AACnD,iBAAiB;AACjB;AACA,gCAAgC,4CAAY;AAC5C,qBAAqB,qCAAS;AAC9B;AACA,yCAAyC,qCAAS;AAClD;AACA;AACA;AACA;AACA,uCAAuC,gEAAgC;AACvE;AACA;AACA;AACA;AACA;AACA,sCAAsC,qCAAS;AAC/C;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,qBAAqB;AACrB;AACA,mBAAmB;AACnB,6BAA6B,yDAAuB;AACpD,4BAA4B,qCAAS;AACrC,yBAAyB,0DAA0B;AACnD,iBAAiB;AACjB;AACA,wBAAwB,qCAAS;AACjC;AACA,aAAa;AACb;AACA,yBAAyB,oDAAoB;AAC7C;AACA;AACA;AACA,iBAAiB;AACjB,gBAAgB,oDAAoB;AACpC;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,gBAAgB,gEAAgC;AAChD;AACA;AACA;AACA;AACA,gBAAgB,gEAAgC;AAChD;AACA;AACA;AACA,kBAAkB,gEAAgC;AAClD;AACA;AACA;AACA;AACA,kBAAkB,gEAAgC;AAClD;AACA;AACA;AACA;AACA,kBAAkB,gEAAgC;AAClD;AACA;AACA;AACA;AACA;AACA,gBAAgB,gEAAgC;AAChD;AACA;AACA,kBAAkB,oDAAoB;AACtC;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,wBAAwB,qCAAS;AACjC;AACA,aAAa;AACb;AACA,yBAAyB,oDAAoB;AAC7C;AACA;AACA;AACA,iBAAiB;AACjB,gBAAgB,oDAAoB;AACpC;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,gBAAgB,gEAAgC;AAChD;AACA;AACA;AACA;AACA;AACA,gCAAgC,4CAAY;AAC5C,qBAAqB,qCAAS;AAC9B;AACA,yCAAyC,qCAAS;AAClD;AACA;AACA;AACA;AACA,uCAAuC,gEAAgC;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,qCAAS;AAC/C;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,qBAAqB;AACrB;AACA,mBAAmB;AACnB,6BAA6B,yDAAuB;AACpD,4BAA4B,qCAAS;AACrC,yBAAyB,0DAA0B;AACnD,iBAAiB;AACjB;AACA,wBAAwB,qCAAS;AACjC;AACA,aAAa;AACb;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL,eAAe,6DAA2B;AAC1C,cAAc,qCAAS;AACvB,WAAW,0DAA0B;AACrC,GAAG;AACH;AACA","sources":["webpack://jinge-material-site/./src/pages/advance/theme.ts","webpack://jinge-material-site/./src/pages/advance/theme.html"],"sourcesContent":["import { Component } from 'jinge';\n\nimport _tpl from './theme.html';\n\nexport class PageTheme extends Component {\n  static template = _tpl;\n}\n","import {  attrs as attrs_jg0402, __ as ___jg0402, createElement as createElement_jg0402, createElementWithoutAttrs as createElementWithoutAttrs_jg0402, textRenderFn as textRenderFn_jg0402, assertRenderResults as assertRenderResults_jg0402 } from 'jinge';\nimport { RouterLinkComponent as RouterLinkComponent_jg0812_4dc9538ef393 } from 'jinge-router';\nimport { PageContainer as PageContainer_jg0801, CodeBlock as CodeBlock_jg0801, NoteBlock as NoteBlock_jg0801 } from '../../components';\nexport default function(component) {\n  const vm_0 = component;\n  return [\n  ...(() => {\n    const attrs = attrs_jg0402({\n      [___jg0402]: {\n        debugName: \"attrs_of_<PageContainer>\",\n        context: component[___jg0402].context,\n        slots: {\n          'default': function(component) {\n            return [\n            (() => {\n              const el = createElement_jg0402(\n                \"section\",\n                {\n                  class: `page-container-section`\n                },\n                createElement_jg0402(\n                  \"h2\",\n                  {\n                    class: `md-headline`\n                  },\n                  `主题`\n                ),\n                createElementWithoutAttrs_jg0402(\n                  \"p\",\n                  `Jinge Material 组件库`,\n                  ...(() => {\n                    const attrs = attrs_jg0402({\n                      [___jg0402]: {\n                        debugName: \"attrs_of_<router-link>\",\n                        context: component[___jg0402].context,\n                        slots: {\n                          'default': function(component) {\n                            return [\n                            textRenderFn_jg0402(component, `移植自 Vue Material`)\n                            ];\n                          }\n                        }\n                      },\n                      to: `about`\n                    });\n                    const el = RouterLinkComponent_jg0812_4dc9538ef393.create(attrs);\n                    component[___jg0402].nonRootCompNodes.push(el);\n                    return assertRenderResults_jg0402(el.__render());\n                  })(),\n                  `，但在多主题的支持上，进行了彻底地重构。主要包括两个方面：`\n                ),\n                createElementWithoutAttrs_jg0402(\n                  \"ul\",\n                  createElementWithoutAttrs_jg0402(\n                    \"li\",\n                    `完全依赖 CSS 变量（css3 variable）来实现颜色的指定和色板的切换。`\n                  ),\n                  createElementWithoutAttrs_jg0402(\n                    \"li\",\n                    `完全遵循 Material Design 最新的设计规范中关于色板的规定，包括暗色主题。`\n                  )\n                )\n              );\n              component[___jg0402].rootNodes.push(el);\n              return el;\n            })(),\n            (() => {\n              const el = createElement_jg0402(\n                \"section\",\n                {\n                  class: `page-container-section`\n                },\n                createElement_jg0402(\n                  \"h2\",\n                  {\n                    class: `md-title`\n                  },\n                  `预置主题`\n                ),\n                createElementWithoutAttrs_jg0402(\n                  \"p\",\n                  `Jinge Material 提供了 4 个预先构建好的主题，包括蓝色（default）、紫色（purple）、暗色蓝（default-dark）和暗色紫（purple-dark）。\n                        构建好的主题文件位于`,\n                  createElementWithoutAttrs_jg0402(\n                    \"code\",\n                    `themes`\n                  ),\n                  `目录下，使用时在 html 中或 js 中加载即可：`\n                ),\n                ...(() => {\n                  const attrs = attrs_jg0402({\n                    [___jg0402]: {\n                      debugName: \"attrs_of_<CodeBlock>\",\n                      context: component[___jg0402].context,\n                      slots: {\n                        'default': function(component) {\n                          return [\n                          (() => {\n                            const el = createElementWithoutAttrs_jg0402(\n                              \"code\",\n                              `\n                                    <link rel=\"stylesheet\" href=\"node_modules/jinge-material/style/themes/default.min.css\"/>\n                                    `\n                            );\n                            component[___jg0402].rootNodes.push(el);\n                            return el;\n                          })()\n                          ];\n                        }\n                      }\n                    },\n                    lang: `html`\n                  });\n                  const el = CodeBlock_jg0801.create(attrs);\n                  component[___jg0402].nonRootCompNodes.push(el);\n                  return assertRenderResults_jg0402(el.__render());\n                })(),\n                ...(() => {\n                  const attrs = attrs_jg0402({\n                    [___jg0402]: {\n                      debugName: \"attrs_of_<CodeBlock>\",\n                      context: component[___jg0402].context,\n                      slots: {\n                        'default': function(component) {\n                          return [\n                          (() => {\n                            const el = createElementWithoutAttrs_jg0402(\n                              \"code\",\n                              `\n                                      import 'jinge-material/style/themes/default.css';\n                                    `\n                            );\n                            component[___jg0402].rootNodes.push(el);\n                            return el;\n                          })()\n                          ];\n                        }\n                      }\n                    },\n                    lang: `ts`\n                  });\n                  const el = CodeBlock_jg0801.create(attrs);\n                  component[___jg0402].nonRootCompNodes.push(el);\n                  return assertRenderResults_jg0402(el.__render());\n                })()\n              );\n              component[___jg0402].rootNodes.push(el);\n              return el;\n            })(),\n            (() => {\n              const el = createElement_jg0402(\n                \"section\",\n                {\n                  class: `page-container-section`\n                },\n                createElement_jg0402(\n                  \"h2\",\n                  {\n                    class: `md-title`\n                  },\n                  `切换主题`\n                ),\n                createElementWithoutAttrs_jg0402(\n                  \"p\",\n                  `组件的颜色全部通过 CSS 变量引用色板中定义的颜色，因此切换主题只需要简单地替换色板文件即可。\n                        从技术角度讲，替换色板本质上是替换(覆盖) CSS 变量的值。`\n                ),\n                createElementWithoutAttrs_jg0402(\n                  \"p\",\n                  `有多种方式可以实现替换（覆盖）CSS 变量的值。一种简单的方案是，在 html 中加载默认的色板时，\n                        为`,\n                  createElementWithoutAttrs_jg0402(\n                    \"code\",\n                    `link`\n                  ),\n                  `元素赋予 id 属性，然后在切换主题的 js 逻辑里，通过这个 id 删除旧的`,\n                  createElementWithoutAttrs_jg0402(\n                    \"code\",\n                    `link`\n                  ),\n                  `元素，然后插入一个指向新主题色板的 css 文件的`,\n                  createElementWithoutAttrs_jg0402(\n                    \"code\",\n                    `link`\n                  ),\n                  `元素。`\n                ),\n                createElementWithoutAttrs_jg0402(\n                  \"p\",\n                  `当前网页的切换主题能力就是通过上述方式实现，可参看 `,\n                  createElement_jg0402(\n                    \"a\",\n                    {\n                      target: `_blank`,\n                      href: `https://github.com/jingeweb/material/blob/main/src/service/theme.ts`\n                    },\n                    `jinge-material-site`\n                  ),\n                  ` 仓库的源码。`\n                )\n              );\n              component[___jg0402].rootNodes.push(el);\n              return el;\n            })(),\n            (() => {\n              const el = createElement_jg0402(\n                \"section\",\n                {\n                  class: `page-container-section`\n                },\n                createElement_jg0402(\n                  \"h2\",\n                  {\n                    class: `md-title`\n                  },\n                  `自定义主题`\n                ),\n                createElementWithoutAttrs_jg0402(\n                  \"p\",\n                  `自定义主题可以通过加载自定义的主题文件（即色板文件）实现。色板里颜色的定义严格遵循 Material Design 的规范。\n                        可在参考 themes 目录下构建好的色板 css 文件创建自定义色板文件，也可以参考下面的 scss 源码创建并构建色板文件：`\n                ),\n                ...(() => {\n                  const attrs = attrs_jg0402({\n                    [___jg0402]: {\n                      debugName: \"attrs_of_<CodeBlock>\",\n                      context: component[___jg0402].context,\n                      slots: {\n                        'default': function(component) {\n                          return [\n                          (() => {\n                            const el = createElementWithoutAttrs_jg0402(\n                              \"code\",\n                              `\n                                    @import 'jinge-material/style/themes/_elevation';\n                                    :root {\n                                      @include theme-elevation(false, #fff);\n                                      --md-primary: #3f51b5;\n                                      --md-secondary: #ff4081;\n                                      --md-background: #fff;\n                                      --md-surface: #fff;\n                                      --md-surface-disabled: rgba(0, 0, 0, 0.12);\n                                      --md-error: #b00020;\n                                      --md-on-primary: #fff;\n                                      --md-on-primary-medium: rgba(255, 255, 255, 0.74);\n                                      --md-on-primary-disabled: rgba(255, 255, 255, 0.38);\n                                      --md-on-secondary: #fff;\n                                      --md-on-secondary-disabled: rgba(255, 255, 255, 0.38);\n                                      --md-on-background: #000;\n                                      --md-on-surface: rgba(0, 0, 0, 0.87);\n                                      --md-on-surface-medium: rgba(0, 0, 0, 0.6);\n                                      --md-on-surface-disabled: rgba(0, 0, 0, 0.38);\n                                      --md-on-error: #fff;\n                                      --md-outline: rgba(0, 0, 0, 0.12);\n                                    }\n                                    `\n                            );\n                            component[___jg0402].rootNodes.push(el);\n                            return el;\n                          })()\n                          ];\n                        }\n                      }\n                    },\n                    lang: `sass`\n                  });\n                  const el = CodeBlock_jg0801.create(attrs);\n                  component[___jg0402].nonRootCompNodes.push(el);\n                  return assertRenderResults_jg0402(el.__render());\n                })()\n              );\n              component[___jg0402].rootNodes.push(el);\n              return el;\n            })()\n            ];\n          }\n        }\n      },\n      centered: true,\n      title: `主题`\n    });\n    const el = PageContainer_jg0801.create(attrs);\n    component[___jg0402].rootNodes.push(el);\n    return assertRenderResults_jg0402(el.__render());\n  })()\n  ];\n}"],"names":[],"sourceRoot":""}