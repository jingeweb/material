source,original,translate
src/components/code-block.html,复制,Copy
src/components/code-block.ts,代码已复制！,Code copied!
src/components/code-example.html,显示示例,View demo
src/components/code-example.html,显示 typescript 代码,Show typescript code
src/components/code-example.html,显示 html 代码,Show html code
src/components/code-example.html,显示 sass 代码,Show sass code
src/layout/footer.html,关于,About
src/layout/footer.html,许可证,License
src/layout/header.ts,默认蓝,Default
src/layout/header.ts,暗夜蓝,Default-Dark
src/layout/header.ts,炫酷紫,Purple
src/layout/header.ts,暗夜紫,Purple-Dark
src/layout/nav-content.ts,首页,Home
src/layout/nav-content.ts,快速上手,Getting Started
src/layout/nav-content.ts,主题,Theme
src/layout/nav-content.ts,路由整合,Router
src/layout/nav-content.ts,国际化,I18N
src/layout/nav-content.ts,UI 规范,UI
src/layout/nav-content.ts,阴影|Elevation,Elevation
src/layout/nav-content.ts,布局|Layout,Layout
src/layout/nav-content.ts,版式|Typography,Typography
src/layout/nav-content.ts,状态|States,States
src/layout/nav-content.ts,组件,Components
src/layout/nav-content.ts,头像|Avatar,Avatar
src/layout/nav-content.ts,徽章|Badge,Badge
src/layout/nav-content.ts,底栏|Bottom Bar,Bottom Bar
src/layout/nav-content.ts,按钮|Button,Button
src/layout/nav-content.ts,卡片|Card,Card
src/layout/nav-content.ts,内容|Content,Content
src/layout/nav-content.ts,日期选择|Datepicker,Datepicker
src/layout/nav-content.ts,对话框|Dialog,Dialog
src/layout/nav-content.ts,分隔线|Divider,Divider
src/layout/nav-content.ts,抽屉|Drawer,Drawer
src/layout/nav-content.ts,空提示|Empty State,Empty State
src/layout/nav-content.ts,表单|Forms,Forms
src/layout/nav-content.ts,自动补全|Autocomplete,Autocomplete
src/layout/nav-content.ts,多选框|Checkbox,Checkbox
src/layout/nav-content.ts,纸片|Chips,Chips
src/layout/nav-content.ts,文件选择|File,File
src/layout/nav-content.ts,文本框|Input & Textarea,Input & Textarea
src/layout/nav-content.ts,单选项|Radio,Radio
src/layout/nav-content.ts,下拉选择|Select,Select
src/layout/nav-content.ts,切换|Switch,Switch
src/layout/nav-content.ts,文本高亮|Highlight,Highlight
src/layout/nav-content.ts,图标|Icon,Icon
src/layout/nav-content.ts,列表|List,List
src/layout/nav-content.ts,菜单|Menu,Menu
src/layout/nav-content.ts,分页|Pagination,Pagination
src/layout/nav-content.ts,气泡确认框|Popconfirm,Popconfirm
src/layout/nav-content.ts,气泡卡片|Popover,Popover
src/layout/nav-content.ts,进度条|Progress,Progress
src/layout/nav-content.ts,消息提示|Snackbar,Snackbar
src/layout/nav-content.ts,正在加载|Spinner,Spinner
src/layout/nav-content.ts,步骤条|Steppers,Steppers
src/layout/nav-content.ts,子标题|Subheader,Subheader
src/layout/nav-content.ts,表格|Table,Table
src/layout/nav-content.ts,标签页|Tabs,Tabs
src/layout/nav-content.ts,工具栏|Toolbar,Toolbar
src/layout/nav-content.ts,工具提示|Tooltip,Tooltip
src/layout/nav-content.ts,关于,Abount
src/layout/nav-content.ts,许可证,License
src/pages/about.html,关于,About
src/pages/about.html,构建在 Jinge 框架上的 Material Design 组件库,Material Desgin components built on jinge framework
src/pages/about.html,作者,Author
src/pages/about.html,项目介绍,Introduction
src/pages/about.html,"在长期的业务项目研发中，我探索并开发了一个和主流 mvvm 框架的核心都不同的<a target=""_blank"" href=""https://github.com/YuhangGe/jinge"">Jinge</a>框架。为了验证这个框架的能力，我决定在这个框架上开发一个 UI 组件库。","In the long-term business project development, I explored and developed a mvvm framework named<a target=""_blank"" href=""https://github.com/YuhangGe/jinge"">jinge</a>which is different from other frameworks. To verify the capabilities of jinge mvvm framework, I decided to develop a UI library named jinge-material with jinge mvvm framework. "
src/pages/about.html,"考虑到主要是为了快速验证 Jinge 框架的能力，并在组件库开发的过程中同步地不断完善这个框架，而不想在组件本身的开发上耗费过多精力，我决定直接从<a target=""_blank"" href=""https://vuematerial.io"">Vue Material</a>这个项目分叉（Fork）。","Considering that jinge-material is mainly to verify the capabilities of the jinge mvvm framework and to continuously improve the jinge mvvm framework, I don't want to spend too much effort on developing components. So I decided to fork directly from the<a target=""_blank"" href=""https://vuematerial.io"">vue-material</a>project."
src/pages/about.html,但由于 Jinge 框架和 Vue 框架除了在功能和使用方式上都保持了现代 mvvm 框架的一致性外，核心几乎完全不同，因此从 Vue Material 项目分叉后，会需要把整个项目除了 scss 样式之外的代码几乎全部重写。因此我并没有采用在 Github 平台上直接分叉（Fork）该项目的方式，而是另起炉灶新开了 Jinge Material 仓库。所以更准确的说法是，Jinge Materail 项目移植（Port）自 Vue Material 项目。,"But since the cores of jinge framework and the vue framework are almost completely different, I need to rewrite almost all of the code except the scss style for the entire project. So I didn't fork the project directly on github, but instead created a new project. So more accurately, jinge-material is ported from the vue-material. "
src/pages/about.html,"Jinge Material 在移植自 Vue Material 项目的过程中，同时也参考<a href=""https://ant.design"" target=""_blank"">Ant Design</a>和<a href=""https://element.eleme.cn/"" target=""_blank"">Element</a>等现代组件库，对项目的目录结构和各别组件的设计进行了重构。","In the process of porting from the Vue Material project, Jinge Material also referenced modern component libraries such as<a href=""https://ant.design"" target=""_blank"">Ant Design</a>and<a href=""https://element.eleme.cn/"" target=""_blank"">Element</a>to refactor the project's directory structure and the design of individual components."
src/pages/advance/i18n.html,国际化,I18N
src/pages/advance/i18n.html,"Jinge Material 组件库没有直接依赖 jinge 框架内置的国际化方案，而是自己实现了一套国际化方案。
      因为使用 Jinge Material 组件的项目不一定需要支持多语言。
      接下来会分不同的情况，介绍如何使用不同语言的 Jinge Material 组件。","The Jinge Material component library does not directly rely on the internationalization scheme built into the jinge framework, but implements a set of internationalization schemes by itself. Because projects using Jinge Material components do not necessarily need to support multiple languages. Next, I will introduce how to use Jinge Material components in different languages in different situations."
src/pages/advance/i18n.html,使用 npm 或 yarn 包,Use npm or yarn packages
src/pages/advance/i18n.html,项目只使用一种语言,Project uses only one language
src/pages/advance/i18n.html,如果只需要支持一种语言，只需要在项目的入口文件里，加入以下的代码：,"If you only need to support one language, just add the following code to the project's entry file:"
src/pages/advance/i18n.html,Jinge Material 组件库没有默认的语言，因此必须指定语言并引入语言资源。,"The Jinge Material component library does not have a default language, so you must specify a language and import language resources."
src/pages/advance/i18n.html,项目使用多种语言,Project uses multiple languages
src/pages/advance/i18n.html,如果需要支持多种语言，推荐一次性将项目需要支持的语言资源全部引入。这样做的好处是切换语言时不再需要额外的通过 ajax 加载资源的逻辑，并且 Jinge Material 的语言资源也很小，不会引入带宽负担。加载的资源可以存放在某个 service 中，比如：,"If you need to support multiple languages, it is recommended to introduce all the language resources that the project needs to support at one time. The advantage of this is that no additional logic for loading resources through ajax is needed when switching languages, and the language resources of Jinge Material are also very small, which will not introduce bandwidth burden. Loaded resources can be stored in a service, such as:"
src/pages/advance/i18n.html,然后将上述的 service 暴露给业务层，比如项目的入口文件设置默认语言，或者在某个按钮的点击事件中切换语言：,"Then expose the above service to the business layer, such as setting the default language for the entry file of the project, or switching the language in the event of a button click:"
src/pages/advance/theme.html,主题,Theme
src/pages/advance/theme.html,"Jinge Material 组件库<router-link to=""about"">移植自 Vue Material</router-link>，但在多主题的支持上，进行了彻底地重构。主要包括两个方面：","Jinge Material component library is <router-link to = ""about"">ported from vue-material</ router-link>, but it has been completely refactored with support for multiple themes. It mainly includes two aspects:"
src/pages/advance/theme.html,完全依赖 CSS 变量（css3 variable）来实现颜色的指定和色板的切换。,Completely rely on CSS variable to achieve the color designation and swatch switching.
src/pages/advance/theme.html,完全遵循 Material Design 最新的设计规范中关于色板的规定，包括暗色主题。,"Full compliance with Material Design’s latest design specifications, including dark theme."
src/pages/advance/theme.html,预置主题,Pre-built themes
src/pages/advance/theme.html,"Jinge Material 提供了 4 个预先构建好的主题，包括蓝色（default）、紫色（purple）、暗色蓝（default-dark）和暗色紫（purple-dark）。
      构建好的主题文件位于<code>themes</code>目录下，使用时在 html 中或 js 中加载即可：","Jinge Material provides 4 pre-built themes, including default, purple, default-dark and purple-dark. The theme files are located at<code>themes</ code> directory. To use it, import one of them in js or html code."
src/pages/advance/theme.html,切换主题,Switch theme
src/pages/advance/theme.html,"组件的颜色全部通过 CSS 变量引用色板中定义的颜色，因此切换主题只需要简单地替换色板文件即可。
      从技术角度讲，替换色板本质上是替换(覆盖) CSS 变量的值。","The colors of the components all refer to the colors defined in the palette through CSS variables, so switching themes requires simply replacing the palette. Technically speaking, replacing a palette is essentially replacing (overriding) the value of a CSS variable."
src/pages/advance/theme.html,"有多种方式可以实现替换（覆盖）CSS 变量的值。一种简单的方案是，在 html 中加载默认的色板时，
      为<code>link</code>元素赋予 id 属性，然后在切换主题的 js 逻辑里，通过这个 id 删除旧的<code>link</code>元素，然后插入一个指向新主题色板的 css 文件的<code>link</code>元素。","There are several ways to replace (overwrite) the values of CSS variables. A simple solution is to assign the id attribute to the<code>link</ code> element when loading the default theme file in html. When switching theme, delete the old<code>link</code>by this id and insert a new<code>link</ code> element pointing to a css file for the new theme."
src/pages/advance/theme.html,"当前网页的切换主题能力就是通过上述方式实现，可参看<a target=""_blank"" href=""https://github.com/jingeweb/material/blob/main/src/service/theme.ts"">jinge-material-site</a>仓库的源码。","The ability to switch themes of the current web page is achieved through the above method, please refer to <a target=""_blank"" href=""https://github.com/jingeweb/material/blob/main/src/service/theme.ts The source code of the "">jinge-material-site</a> repository."
src/pages/advance/theme.html,自定义主题,Custom themes
src/pages/advance/theme.html,"自定义主题可以通过加载自定义的主题文件（即色板文件）实现。色板里颜色的定义严格遵循 Material Design 的规范。
      可在参考 themes 目录下构建好的色板 css 文件创建自定义色板文件，也可以参考下面的 scss 源码创建并构建色板文件：","Custom themes可以通过加载自定义的主题文件（即色板文件）实现。色板里颜色的定义严格遵循 Material Design 的规范。
      可在参考 themes 目录下构建好的色板 css 文件创建自定义色板文件，也可以参考下面的 scss 源码创建并构建色板文件："
src/pages/advance/use-router.html,路由整合,Use Router
src/pages/advance/use-router.html,"Jinge Material 组件库中，个别组件可以直接集成<a target=""_blank"" href=""https://github.com/jinge-design/jinge-router"">jinge-router</a>的路由功能。","In the Jinge Material component library, individual components can directly integrate the routing functions of<a target=""_blank"" href=""https://github.com/jinge-design/jinge-router"">jinge-router</a>."
src/pages/advance/use-router.html,"这些组件目前包括：<router-link to=""components.button"" text=""md-button""/>、<router-link to=""components.list"" text=""md-list-item""/>、<router-link to=""components.bottom-bar"" text=""md-bottom-bar""/>和<router-link to=""components.list"" text=""md-tab""/>。
      在这些组件上，可以直接使用<code>router-link</code>组件的 to、target 和 active 属性。详见这些组件的示例。","These components currently include: <router-link to=""components.button"" text=""md-button""/>, <router-link to=""components.list"" text=""md-list-item""/>, <router-link to=""components.bottom-bar"" text=""md-bottom-bar""/> and <router-link to=""components.list"" text=""md-tab""/>. On these components, you can use the to, target and active attributes of the<code>router-link</code>component directly. See examples of these components for details."
src/pages/advance/use-router.html,"需要说明的是，Jinge Material 组件库并不直接依赖 jinge-router，而是利用 jinge 框架的 Context 功能，在需要的时候通过<code>__getContext('router')</code>来获取上下文中的路由器。也就是说，如果不需要使用上述组件的路由功能，则不需要安装
      jinge-router 库。但如果使用了路由功能（为上述组件指定了 to 属性），但没有在整个项目中依赖 jinge-router，则会报错。","It should be noted that the Jinge Material component library does not directly rely on jinge-router, but uses the context of the jinge framework to obtain the router in the context through<code>__getContext('router')</code>when needed. In other words, if you do not need to use the routing function of the above components, you do not need to install the jinge-router library. However, if the routing function is used (the to attribute is specified for the above components) and jinge-router is not enabled in the entire project, an error will be reported."
src/pages/components/autocomplete/api.ts,名称,Name
src/pages/components/autocomplete/api.ts,描述,Description
src/pages/components/autocomplete/api.ts,示例,Usage
src/pages/components/autocomplete/api.ts,创建自定义的匹配项,Creates a custom autocomplete result item
src/pages/components/autocomplete/api.ts,将收到匹配选项的每个选项。,Will receive each item of the matched options.
src/pages/components/autocomplete/api.ts,当前输入的搜索词。,The current input search term.
src/pages/components/autocomplete/api.ts,在零匹配的情况下创建一个空状态,Creates a empty state in case of zero matches
src/pages/components/autocomplete/api.ts,默认值,Default
src/pages/components/autocomplete/api.ts,自动补全输入框的值,bind the autocomplete value
src/pages/components/autocomplete/api.ts,要搜索的可用选项。如果为 Array，则自动完成功能将使用内部搜索引擎。 如果是 Promise，则需要您自己执行搜索（这通常是由后端服务进行的）。,"The available options to be searched. If Array, the autocomplete will use a inner search engine. If Promise, you will need to implement the search by yourself (this is commonly made by a backend service)."
src/pages/components/autocomplete/api.ts,传递给输入框的 name 属性,The input name attribute
src/pages/components/autocomplete/api.ts,传递给输入框的 id 属性,The input id attribute
src/pages/components/autocomplete/api.ts,指定允许输入的最大的字符数量,"Enables a character count, based on the given value."
src/pages/components/autocomplete/api.ts,输入框的占位提示,Sets a optional placeholder on autocomplete.
src/pages/components/autocomplete/api.ts,使用紧凑型的自动补全组件,Enable the dense layout for options
src/pages/components/autocomplete/api.ts,设置布局方式，请参见下面每种布局的详细说明。,Sets the input layout. The floating variant is the default. See below the detailed description of each layout.
src/pages/components/autocomplete/api.ts,布局方式使用 floating 模式。这是默认的布局。,Sets the input layout to floating. This is the default.
src/pages/components/autocomplete/api.ts,布局方式使用 boxed 模式。,Sets the input layout to a boxed layout.
src/pages/components/autocomplete/api.ts,禁用/启用焦点事件。 如果 false，则选项将在按键后立即显示结果。,"Disable/enable the on focus event. If<code>false</code>, the options will show the results right after a keystroke."
src/pages/components/autocomplete/api.ts,如果 option 为 object，则需要指定哪个属性将用于搜索过滤器。,"If option is object, you need to specify which attribute will be used for the search filter."
src/pages/components/autocomplete/api.ts,选项过滤器的搜索算法。如果传递的 <code>options</code> 属性是 Promise，则此选项不起作用。有关更多详细信息，请参见 <code>md-highlight</code> 的 API。,"Disable/enable the fuzzy search algorithm. If<code>false</code>, the search will match the whole search term. This option do not take any effects if the<code>md-options</code>is a Promise"
src/pages/components/autocomplete/api.ts,参数,Parameters
src/pages/components/autocomplete/api.ts,用户在输入字段上键入时触发,Triggered when the user types on the input field
src/pages/components/autocomplete/api.ts,当用户选择一个选项时触发,Triggered when the user selects an option
src/pages/components/autocomplete/api.ts,在打开选项面板时触发,Triggered when the options panel is opened
src/pages/components/autocomplete/api.ts,在关闭选项面板时触发,Triggered when the options panel is closed
src/pages/components/autocomplete/index.html,自动补全,Autocomplete
src/pages/components/autocomplete/index.html,搜索算法,Search Algorithms
src/pages/components/autocomplete/index.html,"自动补全组件可以使用 3 种搜索算法：<a href=""https://en.wikipedia.org/wiki/roximate_string_matching"" target=""_blank"">fuzzy</a>，includes 和 starts。","Vue Material autocomplete comes with 2 ways of search:<a href=""https://en.wikipedia.org/wiki/Approximate_string_matching"" target=""_blank"">Fuzzy search</a>and search by whole term. The fuzzy search tries to match the results by approximation, finding patterns inside the available options. This will help with accidental type errors and improve the results. If you think that this may be confusing, you can disable this. Example:"
src/pages/components/avatar/api.ts,名称,Name
src/pages/components/avatar/api.ts,描述,Description
src/pages/components/avatar/api.ts,创建可以显示图标的头像。,Creates a avatar that can show a icon.
src/pages/components/avatar/api.ts,制作小头像，更改图像，图标或文字的大小。,"Makes a small avatar, changing the size of image, icon or text."
src/pages/components/avatar/api.ts,大头像，通常用于在 <md-drawer> 中展示当前用户头像。,Makes a large avatar. Commonly used as the current user avatar inside a left md-drawer.
src/pages/components/avatar/index.html,头像,Avatar
src/pages/components/avatar/index.html,头像（Avatar）可以用来代表人物。当与特定徽标一起使用时，也可以用来代表品牌。当没有要显示的图像时，它们也可以用作占位符，例如，在还没有图片的联系人上显示姓名的首字母。,"Avatars can be used to represent people. When used with a specific logo, avatars can also be used to represent a brand. They also can be a placeholder when there is no image to be shown, showing a initial letter of a name on contacts that have no picture yet, for example."
src/pages/components/avatar/index.html,图片,Avatar
src/pages/components/avatar/index.html,头像可以用来展示单个图片，也可以和<code>&lt;md-icon&gt;</code>搭配用于展示图标。,Avatars can show a single image by default but can also display an icon (using the<code>md-icon</code>component):
src/pages/components/avatar/index.html,占位字符,Initial letter as a placeholder
src/pages/components/avatar/index.html,假设您要显示联系人列表，但是其中一些在数据库中没有图片。可以使用联系人姓名的首字母作为占位符，最多支持 2 个字符：,"Let's assume that you want to show a list of contacts, but some of them do not have a picture in your database. You can use the initial letter of the contact name as a placeholder. It can even show 2 letters (for compound names) without problems:"
src/pages/components/avatar/index.html,多种大小,Multiple sizes
src/pages/components/avatar/index.html,可以指定三种不同的大小：常规、小或大。默认情况下，头像具有常规大小。,"You can specify three different sizes, if you want: Regular, Small or Large. By default the avatar have a regular size."
src/pages/components/badge/api.ts,名称,Name
src/pages/components/badge/api.ts,描述,Description
src/pages/components/badge/api.ts,创建静态的方形徽标,Created square type badge.
src/pages/components/badge/api.ts,默认值,Default
src/pages/components/badge/api.ts,指定徽章内容,A content for badge
src/pages/components/badge/api.ts,指定徽章位置，<code>top</code> 或 <code>bottom</code>,Position of badge<code>top</code>or<code>bottom</code>
src/pages/components/badge/api.ts,使用紧凑型徽章,Enables the dense layout
src/pages/components/badge/index.html,徽章,Badge
src/pages/components/badge/index.html,徽章是用于在 UI 元素上提示小状态的描述符。,Small status descriptors for UI elements.
src/pages/components/badge/index.html,按钮，头像等组件需要使用<code>md-badge</code>进行包装。,"Some components like <b>button, avatar</b> needs to be wrapped with<code>md-badge</code>component."
src/pages/components/bottom-bar/api.ts,名称,Name
src/pages/components/bottom-bar/api.ts,描述,Description
src/pages/components/bottom-bar/api.ts,默认值,Default
src/pages/components/bottom-bar/api.ts,设置显示模式。请参见下面每种类型的详细说明。,Sets the display mode. See below the detailed description of each type.
src/pages/components/bottom-bar/api.ts,用固定项目制作栏。适合少量元素。,Makes the bar with fixed items. Good for a small amount of items.
src/pages/components/bottom-bar/api.ts,突出显示所选项目，并隐藏其他项目的标签。适合最多达 6 个的大量元素。,Highlights the selected item and hide the label from the others. Good for a large amount of items. Up to 6.
src/pages/components/bottom-bar/api.ts,动态更改所选项目，通过传递底部栏项目的 id 来实现。,Dynamically changes the selected item. Works passing the ID of a bottom bar item.
src/pages/components/bottom-bar/api.ts,项目的编号，需要动态更改所选项目时可指定,The item id. Used when changing the selected item dynamically
src/pages/components/bottom-bar/api.ts,禁用底部栏，阻止包括单击在内的所有操作。,Disable the bottom bar preventing the click on it and all actions.
src/pages/components/bottom-bar/index.html,底栏,Bottom Bar
src/pages/components/bottom-bar/index.html,底部导航栏使您轻松单击即可浏览和在顶级视图之间切换。,Bottom navigation bars make it easy to explore and switch between top-level views in a single tap. 
src/pages/components/bottom-bar/index.html,和 jinge-router 无缝结合,Seamless integration with jinge-router
src/pages/components/bottom-bar/index.html,移位效果,Shift effect
src/pages/components/bottom-bar/index.html,可以在底栏上使用超棒的移位效果。可以最多同时展示 6 个项目，并让活动项目保持焦点：,You can also use the awesome shift effect on your bars. It is great to keep the focus of the active item and you can show up to 6 items at once:
src/pages/components/button/api.ts,名称,Name
src/pages/components/button/api.ts,描述,Description
src/pages/components/button/api.ts,默认值,Default
src/pages/components/button/api.ts,直接传递到原生 &lt;button&gt; 元素的 type 属性,Applies a type to button
src/pages/components/button/api.ts,禁用按钮。,Disables the button and prevents its actions.
src/pages/components/button/api.ts,是否启用 ripple 效果。,Enables/Disables the ripple effect.
src/pages/components/button/api.ts,事件名称,Name
src/pages/components/button/api.ts,参数,Parameters
src/pages/components/button/api.ts,鼠标点击事件。,Triggered after a mouse click
src/pages/components/button/api.ts,任意可作用到原生 &lt;button&gt; 元素的事件，组件会将事件绑定传递到原生 &lt;button&gt; 元素。,All events will be passed to button element.
src/pages/components/button/api.ts,主题 Primary 颜色按钮。,Set background to primary color.
src/pages/components/button/api.ts,主题 Accent 颜色按钮。,Set background to accent color.
src/pages/components/button/api.ts,创建带有阴影的凸起按钮,Creates raised buttons with elevation
src/pages/components/button/api.ts,使用紧凑型的按钮样式。,A slight small variant of buttons. Useful to create a compact UI.
src/pages/components/button/api.ts,使用圆形的图标按钮。,Enables the rounded-shape icon button
src/pages/components/button/api.ts,使用 FAB 按钮,Turns a button into a FAB
src/pages/components/button/api.ts,"指定 FAB 按钮的位置。位置 [position] 可选值包括：<br/>
<ul>
  <li>top-right</li>
  <li>top-center</li>
  <li>top-left</li>
  <li>bottom-right</li>
  <li>bottom-center</li>
  <li>bottom-left</li>
</ul>","Specify the position of the FAB button. [position] values include:<br/>
<ul>
  <li>top-right</li>
  <li>top-center</li>
  <li>top-left</li>
  <li>bottom-right</li>
  <li>bottom-center</li>
  <li>bottom-left</li>
</ul>"
src/pages/components/button/api.ts,使用 fixed 模式展示按钮。推荐和上述的 6 种位置配合使用。,Apply position: fixed to FAB. Better used with the 6 position coordinates above
src/pages/components/button/index.html,按钮,Button
src/pages/components/button/index.html,"按钮组件用于响应用户的点（触）击操作。按钮类型包括<strong>Flat</strong>,<strong>Raised</strong>和<strong>Floating</strong>。
      Flat 和 Raised 类型的按钮默认情况下只展示文本，但也可以通过特殊的 class 来附加图标。
      Floating 类型的按钮只展示图标。按钮可以通过添加<strong>Dense</strong>这个 class 来调整为较小的紧凑型大小。","Buttons communicate the action that will occur when the user touches them. They can be <strong>Flat</strong>, <strong>Raised</strong> or <strong>Floating</strong>. Flat and raised buttons accepts only text (by default) but with an special class the button can place an icon. Floating Buttons only accept icons. They can also be smaller than usual with a <strong>Dense</strong> class."
src/pages/components/button/index.html,Flat 和 Raised 类型,Flat and Raised Buttons
src/pages/components/button/index.html,"不添加任何 class 的情况下，按钮的默认类型即 Flat。
      添加<code>md-raised</code>这个 class 即可指定按钮类型为 Raised。",The flat button is the default one. No classes or properties needs to be attached to it to make it flat. The raised button can be achieved with the<code>md-raised</code>class.
src/pages/components/button/index.html,所有按钮都有以下接口：,The following options can be applied to all buttons
src/pages/components/button/index.html,图标类型,Icon Button
src/pages/components/button/index.html,要在按钮内显示图标，只需要添加 md-icon-button 类就可以了。您还可以将其与 md-raised 类结合使用。,To display icons inside buttons you only need to add a class and you're good to go. And you can also combine it with the raised class.
src/pages/components/button/index.html,FAB 按钮,Floating Action Buttons
src/pages/components/button/index.html,FAB 按钮代表应用程序中的主要动作，用于升级动作。FAB 按钮可以是常规大小或小型，默认情况下带有强调色。这种类型的按钮只能有图标，因此应与 md-icon 一起使用。,"A Floating Action Button represents the primary action in an application and is used for a promoted action. FAB buttons can be regular sized or mini, with an accent color by default. This type of buttons can only have icons, so it should be used along with<code>&lt;md-icon&gt;</code>."
src/pages/components/button/index.html,每屏最多只使用一个 FAB 按钮，并且仅在按钮的目的是触发屏幕的主要操作时才使用。否则，请使用<code>md-icon-button</code>。,Use only one FAB per page and only if the purpose of the button is to fire the main action of the screen. Otherwise use<code>md-icon-button</code>.
src/pages/components/button/index.html,链接 vs 按钮,Links vs Buttons
src/pages/components/button/index.html,默认情况下，所有按钮都会输出一个<code>button</code>标签。 如果要将其更改为<code>a</code>标记，只需为其指定 href 属性：,"All buttons by default will output a<code>button</code>tag. If you want to change it to a<code>a</code>tag, just pass it a href:"
src/pages/components/button/index.html,和 jinge-router 无缝整合,Seamless integration with jinge-router
src/pages/components/button/index.html,"按钮可以默认和 jinge-router 整合。可以把 md-button 当 router-link 一样使用，为其指定 to, params, active, target 等属性。","Buttons can be integrated with jinge-router by default. You can use the md-button as a router-link, and specify to, params, active, target and other attributes for it."
src/pages/components/card/api.ts,名称,Name
src/pages/components/card/api.ts,描述,Description
src/pages/components/card/api.ts,默认值,Default
src/pages/components/card/api.ts,卡片在鼠标悬停时启用阴影（elevation）效果,Enables full hover elevation in card.
src/pages/components/card/api.ts,操作按钮的对齐方式,Alignment of action buttons.
src/pages/components/card/api.ts,使用 inset 类型的边框,Applies a inset border.
src/pages/components/card/api.ts,自动调整大小或裁剪图像。可选比例包括：1:1、1/1、4:3、4/3、16:9 或 16/9。,"Resizes or clip the image automatically based on the following options: 1:1 or 1/1, 4:3 or 4/3 and 16:9 or 16/9."
src/pages/components/card/api.ts,指定使用中等大小的媒介。仅在 md-card-header 内部起作用。,Applies medium size to the media. Works only inside md-card-header.
src/pages/components/card/api.ts,指定使用大尺寸的媒介。仅在 md-card-header 内部起作用。,Applies big size to the media. Works only inside md-card-header.
src/pages/components/card/api.ts,根据图像应用自动计算出来的渐变背景。此选项通过提取图像上的明暗度来应用背景颜色，从而增加了文本的清晰度。如果图像较暗，则文本的背景会更亮。如果不是很暗，则背景会更暗。,"Applies a gradient background based on the image. This option increases the legibility of the text, applying background colors by extracting the amount of lightness on the image. If the image is dark the background of the text will be lighter. If it's not dark then the background will be darker. This will be calculated automatically."
src/pages/components/card/api.ts,以与 textScrim 相同的计算逻辑应用纯色背景。,Applies a solid background with the same calculation logic of the textScrim.
src/pages/components/card/index.html,卡片,Card
src/pages/components/card/index.html,卡片可能包含照片，文字和超链接。它们可能会显示包含大小可变的元素的内容，例如带有可变长度标题的照片。,"Cards may contain a photo, text, and a link about a single subject. They may display content containing elements of varying size, such as photos with captions of variable length."
src/pages/components/card/index.html,卡片被拆分成了非常细的子组件。卡片的每个部分都是一个组件。可以按照示例的相同逻辑以任意顺序组合它们。,"The cards components are very granular. Every single part of a card is a component. You can combine them in any order that you'd like, following the same logic of the examples."
src/pages/components/card/index.html,常规卡片,Regular Cards
src/pages/components/card/index.html,"最简单的卡片由卡片头（header）、内容区（content area）和动作按钮（action buttons）构成，依次对应组件<code>md-card-header</code>、<code>md-card-content</code>和<code>md-card-actions</code>。
      卡片头可以包含标题和副标题，依次通过类<code>.md-title</code>和<code>.md-subhead</code>指定。内容区可以包含各种文本和图片。动作按钮通常包含<code>md-button</code>组件。","The simplest card structure has a header, content area and action buttons, defined by<code>md-card-header</code>,<code>md-card-content</code>and<code>md-card-actions</code>, respectively. The header may contain a title and a subtitle<code>div</code>or<code>span</code>with classes<code>.md-title</code>and<code>.md-subhead</code>. In the content area, you may use any kind of text elements and for the actions, use at most two<code>md-buttons</code>."
src/pages/components/card/index.html,如果想在用户将鼠标悬停在卡片上时添加阴影（elevation），请添加<code>withHover</code>属性。还可以添加波纹效果，只需要将<code>md-card</code>的包裹在<code>md-ripple</code>组件里。,"If you want to elevate the card as the user hovers over it, add the<code>withHover</code>property. You can also add a ripple effect in combination with the elevation behavior. For doing so, wrap the<code>md-card</code>'s content in a<code>md-ripple</code>tag."
src/pages/components/card/index.html,带图片的卡片,Cards with Images
src/pages/components/card/index.html,为了给卡片增添视觉吸引力，可以在<code>md-header</code>标签内添加包含有图片（<code>img</code>标签）的<code>md-card-media</code>组件。使用属性<code>md-medium</code>和<code>md-big</code>可以将图像大小增加到中等或大尺寸。,"To add visual appeal to your cards, you can add images inside the<code>md-header</code>tag with a<code>md-card-media</code>wraping an<code>img</code>tag. It's possible to increase the image size to medium or big with the properties<code>md-medium</code>and<code>md-big</code>."
src/pages/components/card/index.html,尽管对于纯文本标题不是必需的，但是当使用<code>md-card-media</code>时，标题和副标题应包裹在<code>md-card-header-text</code>组件周围。,"Although not necessary with text-only headers, when using a<code>md-card-media</code>, the title and subtitle should be wrapped around a<code>md-card-header-text</code>tag."
src/pages/components/card/index.html,对于侧面带有操作图标按钮的无文本卡片，请将卡片内容包裹在<code>md-card-media-actions</code>组件内。,"For a text-free card with action icon buttons on the side, wrap the card content inside a<code>md-card-media-actions</code>component."
src/pages/components/card/index.html,如果要使图像充满整个卡片区域，请将卡片内容包装在<code>md-card-media-cover</code>组件内。它的基本结构包括以下组件：,"If you want the image to fill the whole card area, wrap the card content inside a<code>md-card-media-cover</code>component. Its basic structure comprises the following components:"
src/pages/components/card/index.html,<code>md-card-media</code>，用于展示图片。图片的缩放比例可以通过<code>md-card-media</code>组件的<code>md-ratio</code>属性控制。,"<code>md-card-media</code>, where you specify the imagine with an<code>img</code>tag. The image's aspect ratio can be specified with<code>md-card-media</code>'s<code>md-ratio</code>property;"
src/pages/components/card/index.html,<code>md-card-area</code>，用于有卡片头（<code>md-header</code>）和动作（<code>md-card-actions</code>）的情况。,"<code>md-card-area</code>, where header (<code>md-header</code>) and actions (<code>md-card-actions</code>) are specified."
src/pages/components/card/index.html,如果背景图片和标题之间的对比度不足，则后者将无法清晰辨认。为了解决这个问题，请使用<code>md-card-media-cover</code>的属性<code>solid</code>或<code>textScrim</code>。,"If there isn't sufficient contrast between background image and title, the latter won't be perfectly legible. To overcome that, apply a solid or gradient background to the text by using the<code>md-card-media-cover</code>'s properties<code>solid</code>or<code>textScrim</code>, respectively."
src/pages/components/card/index.html,不同底色的卡片,Themes
src/pages/components/card/index.html,为卡片添加<code>.md-primary</code>或<code>.md-accent</code>类可以指定卡片底色。,Your cards will stand out if you change their base color... And you can do it by applying themes! Just add a<code>.md-primary</code>or<code>.md-accent</code>class on them.
src/pages/components/card/index.html,可展开的卡片,Expansion Control
src/pages/components/card/index.html,为避免卡内信息过多或使卡片的高度不超过最大高度，可以将补充信息隐藏在可扩展区域内。,"To avoid too much information inside a card, or keep its height from exceeding the maximum height, hide supplementary information inside a expansible area."
src/pages/components/card/index.html,"使用<code>md-card-expand</code>组件可以实现可展开卡片，同时需要搭配<code>md-card-expand-content</code>用于展示内容，
      以及<code>md-card-action</code>用于提供一个触发展开动作的<code>md-card-expand-trigger</code>组件。","It can be done with the<code>md-card-expand</code>component, that has a<code>md-card-action</code>with a<code>md-card-expand-trigger</code>that toggles a<code>md-card-expand-content</code>."
src/pages/components/card/index.html,不同布局的卡片,Different Layouts
src/pages/components/card/index.html,可以通过许多不同的方式组合这些和其他组件。比如下面的例子：,That's pretty much it. You can now combine these and other components in many distinct ways. Here are some examples:
src/pages/components/checkbox/api.ts,名称,Name
src/pages/components/checkbox/api.ts,描述,Description
src/pages/components/checkbox/api.ts,默认值,Default
src/pages/components/checkbox/api.ts,多选框的值,Current value of checkbox.
src/pages/components/checkbox/api.ts,选中状态下的值,Value of checked state.
src/pages/components/checkbox/api.ts,未选中状态下的值,Value of unchecked state.
src/pages/components/checkbox/api.ts,多选框的唯一标识,The unique id.
src/pages/components/checkbox/api.ts,参数,Parameters
src/pages/components/checkbox/api.ts,多选框的值发生变化时触发,Triggered after a value is selected
src/pages/components/checkbox/examples/array-checkbox.html,描述,Description
src/pages/components/checkbox/examples/array-checkbox.html,示例,Example
src/pages/components/checkbox/examples/array-checkbox.html,值,Value
src/pages/components/checkbox/examples/array-checkbox.html,简单字符串数组,Simple Array of String
src/pages/components/checkbox/examples/array-checkbox.html,请选择城市：,Please choose city:
src/pages/components/checkbox/examples/array-checkbox.html,Object 数组,Array of Object
src/pages/components/checkbox/examples/array-checkbox.html,请选择用户：,Please choose user:
src/pages/components/checkbox/examples/array-checkbox.ts,小葛,Mr. Ge
src/pages/components/checkbox/examples/array-checkbox.ts,小明,Mr. Ming
src/pages/components/checkbox/examples/array-checkbox.ts,小王,Ms. Wang
src/pages/components/checkbox/examples/single-checkbox.html,描述,Description
src/pages/components/checkbox/examples/single-checkbox.html,示例,Example
src/pages/components/checkbox/examples/single-checkbox.html,值,Value
src/pages/components/checkbox/examples/single-checkbox.html,无任何属性的最简单选择框,Simplest checkbox without any attributes
src/pages/components/checkbox/examples/single-checkbox.html,标签,Label
src/pages/components/checkbox/examples/single-checkbox.html,(无),(none)
src/pages/components/checkbox/examples/single-checkbox.html,传递简单的布尔值,Pass simple Boolean
src/pages/components/checkbox/examples/single-checkbox.html,传递简单的字符串值,Pass simple String
src/pages/components/checkbox/examples/single-checkbox.html,我已阅读并同意协议,I have read and agree to the agreement
src/pages/components/checkbox/examples/single-checkbox.html,传递 Object 值,Pass object
src/pages/components/checkbox/examples/single-checkbox.html,禁用状态,Disabled state
src/pages/components/checkbox/index.html,多选框,Checkbox
src/pages/components/checkbox/index.html,多选框有两种使用模式，单一模式（Single）和数组（Array）模式。,"There are two modes of use of md-checkbox, single mode and array mode."
src/pages/components/checkbox/index.html,"单一模式下多选框的 value 是一个单一的值，该多选框被点击切换时，
      其 value 会在 trueValue 和 falseValue 这两个单一值之间切换，
      并通过 change 事件向外传递切换后的值。","The value of a checkbox in a single mode is a single value. When the checkbox is clicked to switch, its value will switch between two single values of trueValue and falseValue, and the changed value will be passed out through the change event ."
src/pages/components/checkbox/index.html,"数组模式下多选框的 value 是数组，需要指定 trueValue 但不需要指定 falseValue。
      该多选框被点击时，会向 value 指定的数组里添加或删除 trueValue 指定的元素。
      需要注意这种模式下，value 指定的数组，会被直接修改，并通过 change 事件向外传递修改后的数组。","The value of the checkbox in array mode is an array. You need to specify trueValue but you do not need to specify falseValue. When the checkbox is clicked, the element specified by trueValue is added or removed from the array specified by value. Note that in this mode, the array specified by value will be directly modified, and the modified array will be passed out through the change event."
src/pages/components/checkbox/index.html,浏览器原生<code>&lt;input type=&quot;checkbox&quot;&gt;</code>标签上可以使用的属性，比如<strong>name</strong>和<strong>required</strong>等，也可以被应用到<code>md-checkbox</code>组件上。,"All other<code>&lt;input type=&quot;checkbox&quot;&gt;</code>attributes, such as <strong>name</strong> and <strong>required</strong>, can be used on<code>md-checkbox</code>."
src/pages/components/chips/api.ts,名称,Name
src/pages/components/chips/api.ts,描述,Description
src/pages/components/chips/api.ts,默认值,Default
src/pages/components/chips/api.ts,启用/禁用纸片上的点击动作。,Enables/Disables the click action in the chip.
src/pages/components/chips/api.ts,创建一个可以执行删除操作的纸片。,"Creates a chip that can hold a delete action. Useful when editing a chip series, like tags or categories."
src/pages/components/chips/api.ts,指定是否禁用纸片（包括点击和删除）。,Enables/Disables the chip to be clickable of deletable.
src/pages/components/chips/api.ts,参数,Parameters
src/pages/components/chips/api.ts,鼠标单击删除图标后触发，仅在 deletable 属性为 true 时才有效。,Triggered after a mouse click on delete icon. Only fired when md-deletable is true.
src/pages/components/chips/api.ts,指定全部的纸片。除非您指定自定义模板，否则必须是字符串数组。,"The content to be displayed as chips. Need to be a array of strings, unless you specify a custom template."
src/pages/components/chips/api.ts,唯一标识，如果为 null，将自动创建。,"The input id. If null, it will be created automatically."
src/pages/components/chips/api.ts,输入框的类型,The input type. Cannot be file.
src/pages/components/chips/api.ts,输入框的占位符，可用于向用户显示将插入哪种数据类型。,The input placeholder. It is useful to show to the user which type of data will be inserted.
src/pages/components/chips/api.ts,创建一个不可编辑的纸片集，可以用在显示详细信息的页面。,Creates a non-editable chips. Useful to show inside a details page.
src/pages/components/chips/api.ts,当纸片集的数量超过限定时，不允许再创建纸片。,Blocks the chips to create items above the limit.
src/pages/components/chips/api.ts,更改输入值时始终检查纸片是否重复，或者仅在插入时检查纸片是否重复,"Always check if there is a duplicated chip while changing the input value, or check it only on insertion"
src/pages/components/chips/api.ts,纸片集发生变化（增删）时触发。,"Triggered when chips change, inserted or deleted."
src/pages/components/chips/api.ts,鼠标单击纸片的删除图标后触发。,Triggered after a mouse click on delete icon of a chip.
src/pages/components/chips/api.ts,鼠标点击纸片时触发。,Triggered after a mouse click on a single chip.
src/pages/components/chips/api.ts,插入纸片后触发,Triggered after a chip inserted.
src/pages/components/chips/api.ts,新插入的 chip,The last inserted chip
src/pages/components/chips/index.html,纸片,Clips
src/pages/components/chips/index.html,纸片以小块的形式表示复杂的实体，例如触点。它们可以用作用户创建任意项目（例如类别或标签）的方式。,"Chips represent complex entities in small blocks, such as a contact. They can be used as a way for a user to create arbitrary items, like categories or tags."
src/pages/components/chips/index.html,独立纸片,Standalone Chip
src/pages/components/chips/index.html,一个纸片可以独立使用，而无需与其它纸片组合。它可以像徽章或应用程序中的实体类别一样使用。同时可以指定纸片是否可以删除和点击：,"A chip can be used as standalone, without any connection with another chip. It can be used like a badge or a category of an entity in your application. You can specify if your chip can be deletable and clickable:"
src/pages/components/chips/index.html,可编辑的纸片集,Editable Chips
src/pages/components/chips/index.html,有时我们需要在屏幕上编辑项目集，例如，在编辑标签时，用户可能需要删除/添加标签。在这种情况下，您可以使用可编辑的纸片集：,"Sometimes we need to edit the set of items on screen, for example, when editing tags, the user may need to remove/add tags. In this case you can use the editable chips, that is the default behaviour:"
src/pages/components/chips/index.html,只读模式,Readonly
src/pages/components/chips/index.html,对于一个具有标签的实体，可能需要将这些标签显示在同一行中，但不允许用户对其进行编辑。这种情况下可以使用带有静态选项的<code>md-chips</code>组件来实现：,"Let's think in an entity that have tags. Sometimes you might need to show all of them in a single row, but not allow the user to edit them. You can achieve that using the<code>md-chips</code>component, with a static option:"
src/pages/components/chips/index.html,自定义模板,Custom Template
src/pages/components/chips/index.html,有时需要显示有关纸片的丰富信息，希望为纸片本身可以支持自定义 HTML 结构。可以通过指定自定义的 slot 来实现：,"Sometimes we need to show more information about a chip, so we want to have a custom HTML structure for the chip itself. To create that scenario we can use the template scope. In this case all you have to do is to create a slot with your custom template and you're good to go. Take a look at this example:"
src/pages/components/chips/index.html,重复检测,Duplicated Chip
src/pages/components/chips/index.html,如果待插入的新纸片和现有纸片有重复，则无法插入。可以自定义重复纸片的反馈样式：,Chips would reject insertion if a chip is duplicated. You can customize feedback style of the duplicated chip:
src/pages/components/chips/index.html,多种颜色,Hue Colors
src/pages/components/chips/index.html,可以使用<code>md-primary</code>或其它方式赋予纸片不同颜色：,You can always use the hue modifiers in single chips:
src/pages/components/content/api.ts,名称,Name
src/pages/components/content/api.ts,描述,Description
src/pages/components/content/api.ts,默认值,Default
src/pages/components/content/api.ts,渲染的 HTML 标签，用于创建不是默认的 div 标签。,"The output tag. Useful when you want to create a section instead of div, for example."
src/pages/components/content/index.html,内容框,Content
src/pages/components/content/index.html,包含任意信息的内容容器在 Material Design 规范中称为材料或材料片。,"The Content surfaces that comprise applications are referred to in this spec as material, or sheets of material. The content component is commonly used to resemble a piece of paper. It'll be useful to theme an arbitrary content."
src/pages/components/datepicker/api.ts,名称,Name
src/pages/components/datepicker/api.ts,描述,Description
src/pages/components/datepicker/api.ts,默认值,Default
src/pages/components/datepicker/api.ts,绑定所选日期的值,Bind the selected date
src/pages/components/datepicker/api.ts,禁用日期。必须是接受4个参数（年，月，日，星期几）的函数。,"The optional disabled dates. Must be Function which accepts 4 arguments (year, month, date, weekday)."
src/pages/components/datepicker/api.ts,禁用焦点事件，仅在用户单击图标时打开。,Disable the on focus event. Will open only if the user clicks on the icon.
src/pages/components/datepicker/api.ts,选择日期而不进行确认，然后立即关闭对话框。,Select the date without confirm and close the dialog immediately.
src/pages/components/datepicker/api.ts,通过将输入类型更改为文本来覆盖原生的日期选择器。,Override native browser pickers by changing type of input to text.
src/pages/components/datepicker/api.ts,防反跳纯文本到日期对象的转换。如果您的用户输入速度较慢，则设置为较长的时间；如果用户的输入速度非常快，则设置为较短的时间。,"Debounces the conversion of plaintext into a date object. Set to a longer time if your users type slowly, or shorter if your users type really fast."
src/pages/components/datepicker/api.ts,参数,Parameters
src/pages/components/datepicker/api.ts,选择/单击日期选择器日期时触发,Triggered when a date is clicked.
src/pages/components/datepicker/api.ts,单击确认按钮时触发,Triggered when Confirm button is clicked.
src/pages/components/datepicker/api.ts,当日期选择器对话框打开时触发,Triggered when a datepicker dialog opens
src/pages/components/datepicker/api.ts,当日期选择器对话框关闭时触发,Triggered when a datepicker dialog closes
src/pages/components/datepicker/examples/basic.html,请选择日期,Please choose date
src/pages/components/datepicker/examples/basic.html,选择日期,Select Date
src/pages/components/datepicker/index.html,日期选择器,Datepicker
src/pages/components/datepicker/index.html,日期选择器通过弹出一个对话窗口，让用户从预定日期集中选择单个日期。该组件可以禁用日期，并且非常易于使用。,Datepickers use a dialog window and provide a simple way to select a single value from a pre-determined set. The component can have disabled dates and it's really easy to use.
src/pages/components/datepicker/index.html,简单选择器,Basic datepicker
src/pages/components/datepicker/index.html,焦点时不自动打开,Cancel open on focus
src/pages/components/datepicker/index.html,默认情况下，日期选择器会在输入框获取焦点时自动打开。这将使得用户无法手动输入日期。您可以禁用此行为：,By default Datepicker component open on focus to it's input. This will make the input useless and the user will not be able to type the date manually. You can disable this behavior:
src/pages/components/datepicker/index.html,立即选中模式,Immediately selection
src/pages/components/datepicker/index.html,选择日期后，可以使“日期选择器”对话框立即关闭。该日期将立即被选择，而无需任何其他确认或用户操作：,The Datepicker dialog can be made to close instantly after a date is selected. The date will be selected immediately without any additional confirmation or user action:
src/pages/components/datepicker/index.html,禁用部分日期,Disabled dates
src/pages/components/datepicker/index.html,有时您可能需要禁用某些日期的选择。下面这个例子是只想让用户选择工作日的示例：,Sometimes you may need to disable certain dates from being selected. Let's suppose that you want to let the user select only week days:
src/pages/components/dialog/api.ts,名称,Name
src/pages/components/dialog/api.ts,描述,Description
src/pages/components/dialog/api.ts,默认值,Default
src/pages/components/dialog/api.ts,控制对话框的打开和关闭,Open or close dialog
src/pages/components/dialog/api.ts,是否启用叠加的灰色蒙层,Enable/disable the dialog overlay
src/pages/components/dialog/api.ts,默认情况下，按 esc 时对话框将关闭。设置为 false 可取消此行为。,"By the default the dialog will close when pressing esc. To disabled that, just set this prop as false"
src/pages/components/dialog/api.ts,默认情况下，单击外部时该对话框将关闭。设置为 false 可取消此行为。,"By the default the dialog will close when clicking outsite. To disabled that, just set this prop as false"
src/pages/components/dialog/api.ts,控制该对话框将在移动屏幕上是否会变为全屏。,The dialog will become fullscreen on mobile screens. This option can disable this behavior.
src/pages/components/dialog/api.ts,参数,Parameters
src/pages/components/dialog/api.ts,对话框打开时触发,Triggered when a dialog opens
src/pages/components/dialog/api.ts,对话框关闭时触发,Triggered when a dialog closes
src/pages/components/dialog/api.ts,在叠加层外点击时触发,Triggered when clicked outside
src/pages/components/dialog/api.ts,通知对话框的标题,The alert title. Optional.
src/pages/components/dialog/api.ts,通知对话框的内容。支持 html。,The alert content. Accepts HTML. Optional.
src/pages/components/dialog/api.ts,确认按钮的文案,The text inside confirm button
src/pages/components/dialog/api.ts,确认,Ok
src/pages/components/dialog/api.ts,确认对话框的标题,The confirm title. Optional.
src/pages/components/dialog/api.ts,确认对话框的内容。支持 html。,The confirm content. Accepts HTML. Optional.
src/pages/components/dialog/api.ts,取消按钮的文案,The text inside cancel button
src/pages/components/dialog/api.ts,取消,Cancel
src/pages/components/dialog/api.ts,确认按钮是否处于加载状态。当该参数为 true 时，确认按钮会展示 md-spinner，并处于 disabled 状态。,"Specifies whether the button is loading. When this parameter is true, the confirm button displays md-spinner and is disabled."
src/pages/components/dialog/api.ts,点击确认按钮时触发,Triggered when the confirm button receives a click
src/pages/components/dialog/api.ts,点击取消按钮时触发,Triggered when the cancel button receives a click
src/pages/components/dialog/api.ts,输入框的默认值,Default value of input
src/pages/components/dialog/api.ts,输入框是否必须填写,Sets whether input is required
src/pages/components/dialog/api.ts,可选参数，指定输入框的最大允许字符数,"Enables the character count, based on the given value."
src/pages/components/dialog/api.ts,输入框的占位提示信息,Sets a optional placeholder on input.
src/pages/components/dialog/api.ts,对话框的标题,The alert title. Optional.
src/pages/components/dialog/examples/alert.html,您的文章已被删除。,Your post has been deleted!
src/pages/components/dialog/examples/alert.html,漂亮！,Cool!
src/pages/components/dialog/examples/alert.html,提交成功！,Post created!
src/pages/components/dialog/examples/alert.html,您的文章 <strong>你好世界</strong> 已经创建成功！,Your post <strong>Material Design is awesome</strong> has been created.
src/pages/components/dialog/examples/confirm.html,确认要使用谷歌的定位服务？,Use Google's location service?
src/pages/components/dialog/examples/confirm.html,使用谷歌定位服务意味着，应用在被使用或处于后台时，都会向谷歌发送<strong>匿名</strong>位置数据。,"Let Google help apps determine location. <br> This means sending <strong>anonymous</strong> location data to Google, even when no apps are running."
src/pages/components/dialog/examples/confirm.html,同意,Agree
src/pages/components/dialog/examples/confirm.html,拒绝,Disagree
src/pages/components/dialog/examples/prompt.html,请输入您的名字：,What's your name?
src/pages/components/dialog/examples/prompt.ts,请输入您的名字：,What's your name?
src/pages/components/dialog/examples/prompt.ts,名字,Type your name...
src/pages/components/dialog/examples/prompt.ts,名字必须以字符 a 打头！,Name must starts with character 'a'!
src/pages/components/dialog/examples/prompt.ts,你好，${this.value},"Hello, ${this.value}"
src/pages/components/dialog/index.html,对话框,Dialog
src/pages/components/dialog/index.html,对话框用于通知用户有关特定任务的信息，并且可能包含关键信息，需要做出决定或涉及多个任务。您可以在其中包含选项卡，所有表单组件等等。,"Dialogs informs users about a specific task and may contain critical information, require decisions, or involve multiple tasks. The dialog component works with any plain html content. You can have tabs inside, all form components and many more."
src/pages/components/dialog/index.html,对话框包含了一组模拟浏览器原生对话框的预设对话框，例如通知（alert）、确认（confirm）和提示输入（prompt）。,"The component can be used with a custom markup, using the auxiliary components or with presets made by Vue Material. Those presets emulates the default Dialogs from Javascript, like confirm, alert and prompt."
src/pages/components/dialog/index.html,对话框组件内部可以包含任何 HTML 内容，用于创建丰富的对话框内容。,"The Dialog component can have any HTML markup inside. This allows you to create rich dialog content, like the details of a table row, for example:"
src/pages/components/dialog/index.html,提示对话框,Alert Dialog
src/pages/components/dialog/index.html,"可以通过在 html 模板里使用<code>md-dialog-alert</code>组件，
      也可以通过在 js 代码中直接调用<code>DialogAlert</code>组件的静态函数<code>show</code>来触发。","You can use the<code>md-dialog-alert</code>component in the html template, or you can directly call the<code>DialogAlert</code>component's static function<code>show</code>in the js code."
src/pages/components/dialog/index.html,"<code>DialogAlert.show</code>函数第一个参数为必须的 Object 类型的 options，
      该 options 可指定的属性和<code>md-dialog-alert</code>组件的属性一致。",The first parameter of the<code>DialogAlert.show</code>function is a required option of type Object. The attributes that can be specified by this option are the same as those of the<code>md-dialog-alert</code>component.
src/pages/components/dialog/index.html,"该函数接收的第二个参数是可选的关闭对话框后的回调函数。
      如果该回调函数返回了<code>false</code>则会阻止对话框的关闭。",The second parameter received by this function is an optional callback function after closing the dialog. If the callback function returns<code>false</code>it will prevent the dialog from closing.
src/pages/components/dialog/index.html,确认对话框,Confirm Dialog
src/pages/components/dialog/index.html,"展示确认对话框，可以通过在 html 模板里使用<code>md-dialog-confirm</code>组件，
      也可以通过在 js 代码中直接调用<code>DialogConfirm</code>组件的静态函数<code>show</code>来触发。","To display the confirm dialog, you can use the<code>md-dialog-confirm</code>component in the html template, or you can directly call the<code>DialogConfirm</code>component's static function<code>show</ code> in the js code. "
src/pages/components/dialog/index.html,"<code>DialogConfirm.show</code>函数第一个参数为必须的 Object 类型的 options，
      该 options 里的可指定的属性和<code>md-dialog-confirm</code>组件的属性一致。",The first parameter of the<code>DialogConfirm.show</code>function is a required option of type Object. The attributes that can be specified by this option are the same as those of the<code>md-dialog-confirm</code>component.
src/pages/components/dialog/index.html,"该函数接收的可选的第二个参数和第三个参数依次是确认和取消的回调，
      如果回调函数返回了<code>false</code>则会阻止对话框的关闭。","The optional second and third parameters received by this function are the callbacks for confirmation and cancellation in order. If the callback function returns<code>false</code>, it will prevent the dialog from closing."
src/pages/components/dialog/index.html,"在实际业务使用时，有一种常见情况是，在 confirm 回调中要调用服务器的 api 接口更新，
      api 请求成功后，才关闭对话框（如果失败，则允许用户重试），
      api 请求过程中 Confirm 按钮不能点击且有 spinner 状态。","In actual business use, there is a common situation that the server's api interface update is called in the confirm callback, the dialog box is closed after the api request is successful (if it fails, the user is allowed to retry), and the confirm button during the api request cannot click and has spinner status."
src/pages/components/dialog/index.html,"针对这种情况，confirmCallback 允许返回 false 来阻止对话框关闭，还允许直接
      返回一个 Promise 对象。对话框会等待该 Promise，直到其 resolve 返回的数据
      不是 false 才关闭对话框。","In this case, confirmCallback allows you to return false to prevent the dialog from closing, and also allows you to return a Promise object directly. The dialog will wait for the promise, and will not close the dialog until the data returned by its resolve is not false."
src/pages/components/dialog/index.html,输入对话框,Prompt Dialog
src/pages/components/dialog/index.html,"输入对话框和确认对话框类似，可以通过在 html 模板里使用<code>md-dialog-prompt</code>组件，
      也可以通过在 js 代码中直接调用<code>DialogPrompt</code>组件的静态函数<code>show</code>来触发。","Prompt Dialog和确认对话框类似，可以通过在 html 模板里使用<code>md-dialog-prompt</code>组件，
      也可以通过在 js 代码中直接调用<code>DialogPrompt</code>组件的静态函数<code>show</code>来触发。"
src/pages/components/dialog/index.html,"<code>DialogPrompt.show</code>函数和<code>DialogConfirm.show</code>的参数一致，但有一个区别是：
      confirmCallback 如果返回字符串，会认为是对输入值的错误提示；如果返回 Promise，对于 reject 的数据或 resolve 的字符串 也会认为
      是错误提示。","The parameters of the<code>DialogPrompt.show</code>function are the same as those of<code>DialogConfirm.show</code>, but there is one difference: if confirmCallback returns a string, it will be considered as an error prompt for the input value; if it returns Promise, for the rejected data or the resolved string will also be considered as an error prompt."
src/pages/components/divider/api.ts,名称,Name
src/pages/components/divider/api.ts,描述,Description
src/pages/components/divider/api.ts,创建一个插入分隔符，通常用于分隔相关内容。,"Creates a inset divider, which is commonly used to separate related content."
src/pages/components/divider/index.html,分隔线,Divider
src/pages/components/divider/index.html,分隔线是一个轻量级的细法则，用于将列表和页面布局中的内容分组，并有助于将页面内容和层次结构组织到各个图块中。,"A divider is a thin, lightweight rule that groups content in lists and page layouts and helps to organize page content and hierarchy into individual tiles."
src/pages/components/divider/index.html,分隔符可用于列表中并分隔内容。它们非常适合导航面板和菜单。,The dividers can be used in lists and to separate content. They fit well in navigation panels and menus.
src/pages/components/drawer/api.ts,名称,Name
src/pages/components/drawer/api.ts,描述,Description
src/pages/components/drawer/api.ts,默认值,Default
src/pages/components/drawer/api.ts,将抽屉的打开设置为从侧面推送模式，会挤压内容。,"Open drawer with push mode, ie. drawer will push content"
src/pages/components/drawer/api.ts,控制抽屉的打开和关闭,Trigger drawer open or close
src/pages/components/drawer/api.ts,将 position:fixed 应用于抽屉。可用作应用程序的主抽屉（类似于本文档）。,Applies position:fixed to drawer. Useful to be used as the main drawer of the application (like on this documentation).
src/pages/components/drawer/api.ts,将抽屉放置在屏幕的右侧。,Place the drawer on the right of the screen.
src/pages/components/drawer/api.ts,参数,Parameters
src/pages/components/drawer/api.ts,抽屉打开时触发,Triggered when a drawer opens
src/pages/components/drawer/api.ts,抽屉关闭时触发,Triggered when a drawer closes
src/pages/components/drawer/index.html,抽屉,Drawer
src/pages/components/drawer/index.html,导航抽屉从左侧或右侧滑入，并包含应用程序的导航目标。尽管可以接受任何类型的内容，但通常与内部列表一起使用。,"The navigation drawer slides in from the left or right and contains the navigation destinations for your app. It is commonly used with lists inside, although can accept any type of content."
src/pages/components/drawer/index.html,覆盖在上方,Over page content
src/pages/components/drawer/index.html,从侧边推出,Push page content
src/pages/components/empty/api.ts,名称,Name
src/pages/components/empty/api.ts,描述,Description
src/pages/components/empty/api.ts,默认值,Default
src/pages/components/empty/api.ts,空状态的标签，用作标题。,The label of the empty state. Works as a title. Optional.
src/pages/components/empty/api.ts,空状态的描述。,The description of the empty state. Optional.
src/pages/components/empty/api.ts,使空状态变圆，并具有漂亮的背景颜色。,"Make the empty state rounded, with a nice background color."
src/pages/components/empty/api.ts,圆角的宽度/高度大小。仅适用于 <code>rounded</code>。,The rounded width/height size. Only works with<code>md-rounded</code>.
src/pages/components/empty/examples/basic.html,创建你的第一个项目,Create your first project
src/pages/components/empty/examples/basic.html,创建项目后，你就可以上传设计稿并和他人协作,"Creating project, you'll be able to upload your design and collaborate with people."
src/pages/components/empty/examples/basic.html,创建第一个项目,Create first project
src/pages/components/empty/index.html,空提示,Empty State
src/pages/components/empty/index.html,空状态的示例是不包含任何项目的列表，或者不显示任何结果的搜索。尽管这些状态并不常见，但应设计为防止用户混淆。,"A list that doesn’t contain any items, or a search that doesn’t display any results, are examples of empty states. Although these states aren’t typical, they should be designed to prevent user confusion."
src/pages/components/empty/index.html,最基本的空白状态显示非交互式图像和文本标语。 为此，您可以使用图标，标题和空状态描述。 空状态默认提供了不错的设计，但是您始终可以在<code>md-empty-state</code>之上创建自己的设计。,"The most basic empty state displays a non-interactive image and a text tagline. For that you can use an icon, title and an empty state description. Vue Material already provide a nice design for your empty states, but you can always create your own design on top of<code>md-empty-state</code>."
src/pages/components/empty/index.html,空状态可以是基本状态或圆形状态。仅对台式机建议使用四舍五入的变体，因为它的大小是固定的，并且无法响应。,"The empty state can be basic or rounded. The rounded variant is recommended only for desktop, as it size is fixed and do not work responsivelly."
src/pages/components/empty/index.html,空状态,Empty State
src/pages/components/empty/index.html,可以在任何屏幕尺寸上使用默认的空状态。您可以将设计与图标，标签和说明结合使用，因为这些都是可选的。,"The default empty state can be used on any screen size. You can combine designs with icon, label and description, as any of this are optional. It also accepts a default<code>&lt;slot&gt;</code>to pass any arbitrary content, like a button to give an option to continue the screen flow:"
src/pages/components/empty/index.html,圆角的空状态以清新的外观和漂亮的背景色来引起用户的注意。,"The rounded empty state gives a fresh look with a nice background color, to gain the attention of your user."
src/pages/components/empty/index.html,还可以将两种布局与原色或强调色结合使用，以匹配您的主题。,"You can also combine both layouts with primary or accent colors, to match your theme. Gorgeous!"
src/pages/components/file/api.ts,名称,Name
src/pages/components/file/api.ts,描述,Description
src/pages/components/file/api.ts,参数,Parameters
src/pages/components/file/api.ts,每次选择文件时触发，传递 FileList 参数。,Emits a FileList. Triggered every time a file is selected.
src/pages/components/file/index.html,文件选择,Regular File
src/pages/components/file/index.html,文件选择组件允许用户选择一个或多个文件。可以像普通输入文件一样过滤文件类型，或选择多个文件。,File inputs allows the user to pick one or multiple files. It can also filter the file type just like a normal input file or select multiple files.
src/pages/components/file/index.html,<code>md-file</code>组件可以像<code>md-input</code>组件一样使用。即，可以使用包括<strong>placeholder</strong>和<strong>required</strong>以及<strong>disabled</strong>等属性。,"<code>md-file</code>works just like a regular<code>md-input</code>component. This means that you can pass any<code>md-input</code>prop to<code>md-file</code>, like <strong>placeholder</strong>, <strong>required</strong> and <strong>disabled</strong>, for example."
src/pages/components/file/index.html,浏览器原生<code>&lt;input type=&quot;file&quot;&gt;</code>支持的各种属性，比如<strong>multiple</strong>和<strong>accept</strong>等，都可以使用到<code>md-file</code>上。,"All other<code>&lt;input type=&quot;file&quot;&gt;</code>attributes, such as <strong>multiple</strong> and <strong>accept</strong>, can be used on<code>md-file</code>."
src/pages/components/highlight/api.ts,名称,Name
src/pages/components/highlight/api.ts,描述,Description
src/pages/components/highlight/api.ts,默认值,Default
src/pages/components/highlight/api.ts,待进行关键字搜索的文本,Text to render.
src/pages/components/highlight/api.ts,待查询的高亮关键字,Term to search.
src/pages/components/highlight/api.ts,搜索算法忽略大小写,Ignore case when search.
src/pages/components/highlight/api.ts,指定使用哪种算法进行搜索，默认使用模糊查询（fuzzysearch）,"Specify which algorithm to use for searching, fuzzy search is used by default"
src/pages/components/highlight/api.ts,使用模糊查询（fuzzysearch）算法来搜索关键字。,Use fuzzysearch algorithm to search term.
src/pages/components/highlight/api.ts,使用包含子串（includes）算法来搜索关键字。,Use the includes algorithm to search term.
src/pages/components/highlight/api.ts,使用以子串打头（starts）算法来搜索关键字。,Use the startsWith algorithm to search term.
src/pages/components/highlight/index.html,文本高亮,Highlight Text
src/pages/components/highlight/index.html,"文本高亮组件用于在浏览器端进行字符串关键字搜索并以高亮匹配字符的形式展示结果。
      搜索算法是在浏览器中执行的，但通常情况下，都应该尽可能使用后端接口来实现字符串的关键字搜索。","Highlight Text组件用于在浏览器端进行字符串关键字搜索并以高亮匹配字符的形式展示结果。
      搜索算法是在浏览器中执行的，但通常情况下，都应该尽可能使用后端接口来实现字符串的关键字搜索。"
src/pages/components/highlight/index.html,"文本高亮组件支持三种查询算法，包括<a href=""https://en.wikipedia.org/wiki/roximate_string_matching"" target=""_blank"">fuzzy</a>、includes 和 starts，依次代表模糊匹配、包含子串匹配和以子串打头匹配。默认情况下使用模糊匹配。","This component supports three search algorithms, including<a href=""https://en.wikipedia.org/wiki/roximate_string_matching"" target=""_blank"">fuzzy</a>, includes and starts. Fuzzy search is used by default."
src/pages/components/icon/api.ts,名称,Name
src/pages/components/icon/api.ts,描述,Description
src/pages/components/icon/api.ts,默认值,Default
src/pages/components/icon/api.ts,图标大小，可以指定为数字，也可以指定为 css 字符串值。默认大小为当前字号。,Icon size can be specified as a number or as a css string value. The default size is the current font size.
src/pages/components/icon/api.ts,指定需要下载并渲染的远程 svg 资源路径。,Specifies the remote svg resource path to download and render.
src/pages/components/icon/api.ts,当使用 src 指定远程资源时，可以通过 cache 参数指定是否缓存该资源。,"When using src to specify a remote resource, you can specify whether to cache the resource."
src/pages/components/icon/api.ts,参数,Parameters
src/pages/components/icon/api.ts,当 src 属性指定的远程 svg 资源被加载结束时触发。如果加载出错，则会将错误信息做为参数传递。,"Triggered when the remote svg resource specified by the src attribute is loaded. If the loading fails, the Error object is passed as a parameter."
src/pages/components/icon/examples/material-icons.html,不同主题的图标：,Icons with different themes:
src/pages/components/icon/index.html,图标,Icon
src/pages/components/icon/index.html,图标通过相对抽象的几何形状来在视觉上表达信息，包括核心思想、功能或主题等等。,"Material icons uses geometric shapes to visually represent core ideas, capabilities, or topics."
src/pages/components/icon/index.html,"Material Design 的图标包含 5 种主题，每种主题下都有超过 1000 个图标，共计超过 5000 个图标。
      所有图标在 Jinge Material 中都可以使用，并且只会按需加载。图标资源位于<code>dist/icons/</code>目录。","Material Design's icons include 5 themes, with more than 1,000 icons under each theme for a total of more than 5000 icons. All icons are available in Jinge Material and will only load on demand. Icon resources are located in the<code>dist/icons/</code>directory."
src/pages/components/icon/index.html,使用 Material 图标,Material Icons
src/pages/components/icon/index.html,"通过<code>md-icon-{ICON_ID}-{THEME}</code>这个格式的组件别名可以使用 Material 官方的全部图标。
      其中，<code>{THEME}</code>请替换为实际需要的主题。可用的主题包括<code>outline</code>、<code>round</code>、<code>sharp</code>和<code>twotone</code>，
      依次对应 Material Desgin 官网上的 Filled, Outlined, Rounded, Sharp, Two-Tone 主题。
      同时，<code>{ICON_ID}</code>请替换为实际的图标的 id，比如<code>home</code>,<code>3d_rotation</code>等，
      更多的图标 id 请在使用时直接参考<a href=""https://material.io/tools/icons"" target=""_blank"">Material Desgin Icons</a>官网。","Through the<code>md-icon-{ICON_ID}-{THEME}</code>component alias, you can use all the official material icons. Among them, please replace<code>{THEME}</code>with the theme you actually need. Available themes includ<code>outline</code>,<code>round</code>,<code>sharp</code>, and<code>twotone</code>, in that order corresponds to Filled, Outlined, Rounded, Sharp, Two-Tone themes on the Material Desgin website. At the same time, please replace<code>{ICON_ID}</code>with the actual icon id, such as<code>home</code>,<code>3d_rotation</code>, etc. For more icon ids, please visit the<a href=""https://material.io/tools/icons"" target=""_blank"">Material Desgin Icons</a>official website."
src/pages/components/icon/index.html,"通常情况下，一个项目只会使用同一个主题的图标。因此，还可以直接使用<code>md-icon-{ICON_ID}</code>这个格式的组件别名来引用默认主题的图标组件。
      默认主题为<code>baseline</code>，但可以在构建工具（比如 webpack）的配置中指定其它主题为默认主题。","Usually, a project will only use one icon theme. Therefore, you can also directly use the component alias of the format<code>md-icon-{ICON_ID}</code>to reference the icon component of the default theme. The default theme is<code>baseline</code>, but you can specify another theme as the default theme in the configuration of a build tool such as webpack."
src/pages/components/icon/index.html,使用 Icon Font 图标,Icon Font
src/pages/components/icon/index.html,"直接使用<code>md-icon</code>组件并搭配<code>class</code>属性，可以使用 Icon Font 图标库，比如<a href=""http://fontawesome.io/"" target=""_blank"">Font Awesome</a>。
      但请注意，你需要自己引入相应的 Web Font 资源。参看下面的示例：","You can use the Icon Font icon library (such as<a href=""http://fontawesome.io/ "" target=""_ blank"">Font Awesome</a>) by using the<code>md-icon</code>component with the<code>class</code>attribute. Note, however, that you need to load Web Font resources yourself. See the following example:"
src/pages/components/icon/index.html,加载 SVG,Load SVG
src/pages/components/icon/index.html,"如果给<code>md-icon</code>组件指定<code>src</code>属性，
      组件会使用 ajax 来加载该指定的远程图片，加载完后渲染到组件内部。","If you specify the<code>src</code>attribute for the<code>md-icon</code>component, the component will use ajax to load the specified remote svg and render it to the component after loading."
src/pages/components/input/api.ts,名称,Name
src/pages/components/input/api.ts,描述,Description
src/pages/components/input/api.ts,默认值,Default
src/pages/components/input/api.ts,使用内联标签，当输入获得焦点时，标签将消失。,Make the label inline. This means that the label will disappear when the input receives a focus.
src/pages/components/input/api.ts,启用字符计数器，仅适用于 input 和 textarea 等有 maxlength 属性的组件。,Enable the character counter. Only works with fields that have a<code>md-input</code>or<code>md-textarea</code>with a<code>maxlength</code>or<code>md-counter</code>attributes.
src/pages/components/input/api.ts,在输入的右侧添加一个清除按钮。,Add a clear button on the right of the input.
src/pages/components/input/api.ts,在输入的右侧添加一个切换按钮以显示/隐藏密码。仅适用于具有密码类型的 input 组件。,Add a toggle button on the right of the input to reveal/hide the password. Only works with fields that have a<code>md-input</code>with type password.
src/pages/components/input/api.ts,参数,Parameters
src/pages/components/input/api.ts,鼠标单击清除图标后触发。仅在 clearable 为 true 时才有效。,Triggered after a mouse click on clear icon. Only fired when md-clearable is true.
src/pages/components/input/api.ts,绑定到输入框的值,Value bind to input.
src/pages/components/input/api.ts,传递给原生 input 标签的 type 属性,The input type. Similar to HTML5 type attribute.
src/pages/components/input/api.ts,占位提示信息,The input placeholder. Similar to HTML5 placeholder attribute.
src/pages/components/input/api.ts,传递给原生 input 标签的 required 属性,The input required. Similar to HTML5 required attribute.
src/pages/components/input/api.ts,唯一标识,The input id. Similar to HTML5 id attribute.
src/pages/components/input/api.ts,传递给原生 input 标签的 name 属性,The input name. Similar to HTML5 name attribute.
src/pages/components/input/api.ts,禁用输入框,Disable the input and prevent it interactions.
src/pages/components/input/api.ts,启用该字段的计数器并设置最大长度,Enable the counter for the field and set a maxlength
src/pages/components/input/api.ts,启用该字段的计数器。当您只需要一个计数器而不设置最大长度时，这很有用。设置最大长度后，如果不想显示计数器，请将此属性设置为 false,"Enable the counter for the field. This is useful when you want only a counter without setting a maxlength. After setting a maxlength, in case if you do not want to display the counter, set this prop to false"
src/pages/components/input/api.ts,文本发生变化时的事件，等价于原生 input 标签的 input 事件。,"The event when the text changes, equivalent to the input event of the native input tag."
src/pages/components/input/api.ts,绑定到文本框的值,Value bind to textarea.
src/pages/components/input/api.ts,文本框随录入文本自动增加高度,Enable the textarea autogrow with content.
src/pages/components/input/api.ts,文本发生变化时的事件，等价于原生 textarea 标签的 input 事件。,"The event when the text changes, equivalent to the input event of the native textarea tag."
src/pages/components/input/examples/text.html,初始值,Initial Value
src/pages/components/input/examples/text.html,初始值（只读）,Initial Value (Readonly)
src/pages/components/input/examples/text.html,请在此处输入！,Type here...
src/pages/components/input/examples/text.html,这是一些辅助说明的文字,Some helper text
src/pages/components/input/examples/text.html,使用标签,Label
src/pages/components/input/examples/text.html,可读性更高的占位信息,A nice placeholder
src/pages/components/input/examples/text.html,内联样式,Inline
src/pages/components/input/examples/text.html,输入数字,Number
src/pages/components/input/examples/text.html,可换行长文本,Textarea
src/pages/components/input/examples/text.html,随文本内容自动适应高度,Autogrow textarea
src/pages/components/input/examples/text.html,禁用状态,Disabled
src/pages/components/input/index.html,文本框,Input & Textarea
src/pages/components/input/index.html,文本框允许用户通常在表单内部输入，编辑和选择文本。可以用在包括对话框和搜索等场景。,"Text fields allow users to input, edit and select text typically inside forms. But they can appear in other places as well like dialog boxes and search."
src/pages/components/input/index.html,"典型的输入型组件都需要被包裹在表单项<code>md-field</code>组件里搭配使用，
      包括<code>md-input</code>、<code>md-textarea</code>和<code>md-select</code>。","form fields work with a<code>md-field</code>wrapped around an input component, that can be<code>md-input</code>,<code>md-textarea</code>or even a<code>md-select</code>."
src/pages/components/input/index.html,文本输入,Input & Textarea
src/pages/components/input/index.html,表单项组件支持和原生 html5 相兼容的属性，并支持更多额外属性。,"Fields mimic the HTML5 attributes to keep the same compatibility with native inputs, but has extra options. This allows Vue Material to accordingly setup the various<code>md-field</code>with its corresponding input options."
src/pages/components/input/index.html,可以在<code>md-input</code>和<code>md-textarea</code>上设置和原生标签一致的属性，例如：,You will be able to set the same properties of a regular<code>input</code>element on<code>md-input</code>. This is also valid for<code>textarea</code>and<code>select</code>. Take a look:
src/pages/components/input/index.html,错误提示,Errors and Messages
src/pages/components/input/index.html,文本框可以添加验证状态以显示错误消息。,You can add validation states to show error messages. 
src/pages/components/input/index.html,字符计数,Character count
src/pages/components/input/index.html,可以在需要限制用户输入的地方使用字符计数器，例如新浪微博最多允许 140 个字符。,"You can use character counters where you need to limit the user input, like on Twitter's 280 character tweet:"
src/pages/components/input/index.html,图标,Icons
src/pages/components/input/index.html,可以为文本框添加图标来区分其内容代表的含义：,Sometimes we may want to differentiate our inputs based on it content value:
src/pages/components/input/index.html,内部动作,Inline Actions
src/pages/components/input/index.html,输入框可以具有可清除的功能，以使用户更容易清除值。为了更好地使用密码，我们可以显示一个切换按钮来显示密码。这对于移动应用程序确实非常有用：,Fields can have a clearable feature to make it easier for users to clear the value. To use passwords better we can show a toggle button to reveal the password. This is really useful for mobile applications:
src/pages/components/input/index.html,前缀和后缀,Prefixes & suffixes
src/pages/components/input/index.html,前缀和后缀可用于澄清单位或预先添加输入。前缀在文本字段中左对齐，而后缀右对齐。文本框可以同时具有前缀和后缀。,Prefixes and suffixes can be used to clarify units or to add input in advance. Prefixes are left justified in the text field whereas suffixes are right justified. Text fields can have both prefixes and suffixes.
src/pages/components/input/index.html,任何原生<code>input</code>和<code>textarea</code>的属性，都可以被应用到<code>md-input</code>和<code>md-textarea</code>组件上。,Any<code>input</code>or<code>textarea</code>attributes can be used on<code>md-input</code>/<code>md-textarea</code>respectively.
src/pages/components/list/api.ts,名称,Name
src/pages/components/list/api.ts,描述,Description
src/pages/components/list/api.ts,默认值,Default
src/pages/components/list/api.ts,如果设置为 true，则一个列表最多只能有一个列表项展开。当展开另一个列表项时，原先展开的列表项将被折叠,"If set true, one expandable list item could be expanded at most at a time. The expanded list item will be collapsed when another is expanded"
src/pages/components/list/api.ts,使用紧凑型布局,Enables the dense layout
src/pages/components/list/api.ts,双行列表可以更好地显示有关单个项目的其他信息,The double line lists are good to show additional information about single items
src/pages/components/list/api.ts,三行列表适合显示项目的全部内容的预览,The three line lists are great for showing a preview of the full content of the item
src/pages/components/list/api.ts,启用可展开面板,Enables the expansion panel
src/pages/components/list/api.ts,控制面板的展开和关闭,The prop to show/hide the expansion panel.
src/pages/components/list/index.html,列表,List
src/pages/components/list/index.html,列表用于将多个项目垂直连续展示，适合多个相似数据项目的展示。,Lists present multiple line items vertically as a single continuous element and are best suited for similar data types.
src/pages/components/list/index.html,列表项可以具有一，二或三行内容，其中可以包含不同的信息。列表在移动和桌面 APP 上都可以适用。,"They can have one, two or three lines of content, with a lot of different contents. Even that the examples on this page may look like that lists can only be used in mobile viewport, you can and should use them in desktop too."
src/pages/components/list/index.html,列表项可以具有交互事件，例如单击和鼠标按下事件。同时还可以和 jinge-router 无缝集成。,"List items can have interaction events, like click and mousedown events. They also integrate nicely with jinge-router."
src/pages/components/list/index.html,单行列表对于导航元素（例如抽屉）确实非常有用。可以向其传递图标，文本和操作。它们的布局也很密集，可以在屏幕上容纳更多项目：,"Single line lists are really great for navigational elements, such as drawers. You can pass a icons, text and actions to them. They have also a dense layout, to accommodate more items on the screen:"
src/pages/components/list/index.html,双行列表可以更好地显示了有关单个项目的其他信息：,The double line lists are good to show additional information about single items:
src/pages/components/list/index.html,三行列表非常适合显示项目的全部内容的预览。比如，适用于电子邮件列表和其他类似信息：,The three line lists are great for showing a preview of the full content of the item. It's good for email lists and other information like that:
src/pages/components/list/index.html,交互响应,List Actions
src/pages/components/list/index.html,列表项将根据给定的交互类型，渲染成不同的浏览器 html 标签。,List items will render different tags based on the interaction types given.
src/pages/components/list/index.html,如果传递了下面列出的事件之一，则该列表项将被渲染成<code>&lt;button&gt;</code>：,"If you pass one of those event, the item will automatically render a<code>&lt;button&gt;</code>:"
src/pages/components/list/index.html,如果指定了<code>href</code>或<code>to</code>属性，则该列表项将被渲染成<code>&lt;a&gt;</code>：,"If you pass a<code>href</code>attribute, the item will automatically render an<code>&lt;a&gt;</code>tag."
src/pages/components/list/index.html,所有<code>router-link</code>组件的可用属性，都可以被使用到列表项上。,All attributes of<code>router-link</code>can be simply used here. This will render an<code>&lt;a&gt;</code>tag:
src/pages/components/list/index.html,列表接受控件作为主要切换动作。对改善表单布局非常有用：,Lists accept controls as main toggle actions. Really useful to improve form layouts:
src/pages/components/list/index.html,列表可以具有可展开面板以显示更多信息：,Lists accept controls as main toggle actions. Really useful to improve form layouts:
src/pages/components/menu/api.ts,名称,Name
src/pages/components/menu/api.ts,描述,Description
src/pages/components/menu/api.ts,默认值,Default
src/pages/components/menu/api.ts,控制菜单的打开和关闭,Used to show/hide a menu.
src/pages/components/menu/api.ts,如果此选项为 true，则在菜单外部发生任何单击事件后，菜单将关闭。,"When this options is true, the menu will be closed after any click event."
src/pages/components/menu/api.ts,如果此选项为 true，则单击 <code>md-menu-item</code>后，菜单将关闭。仅当菜单具有以下事件之一时，此功能才有效：<br><ul>${getEventNames()}</ul>,"When this options is true, the menu will close after a click on a <code>md-menu-item</code>. This will only work if the menu have one of the events below: <br><ul>${getEventNames()}</ul>"
src/pages/components/menu/api.ts,设置菜单的位置。支持所有 popper.js 的参数。,Set the placement of a menu. Support all options of popper.js.
src/pages/components/menu/api.ts,设置自定义偏移量。支持数字，或 popper.js 的参数。默认情况下，将相对于触发器计算偏移量。,Set custom offset. Support Number or option of popper.js. By default will use auto calculated offset.
src/pages/components/menu/api.ts,设置菜单的大小。请参见下面每种尺寸的详细说明。,Sets the size of a menu. See below the detailed description of each size.
src/pages/components/menu/api.ts,设置小尺寸菜单（112px）,Sets a menu with a small size (112px)
src/pages/components/menu/api.ts,设置中等大小（168px）的菜单,Sets a menu with a medium size (168px)
src/pages/components/menu/api.ts,设置大尺寸菜单（224px）,Sets a menu with a big size (224px)
src/pages/components/menu/api.ts,设置一个巨大的菜单（280px）,Sets a menu with a huge size (280px)
src/pages/components/menu/api.ts,菜单大小自动适应内容,Sets a menu with a auto size
src/pages/components/menu/api.ts,参数,Parameters
src/pages/components/menu/api.ts,菜单打开时触发,Triggered when menu opened.
src/pages/components/menu/api.ts,菜单关闭时触发,Triggered when menu closed.
src/pages/components/menu/index.html,菜单,Menu
src/pages/components/menu/index.html,菜单用于弹出一组按钮或其他控件以进行交互。列表通常展示为一个选项列表，每行一个选项，但也可以显示更丰富的内容。,"Menus appear upon interaction with a button, action, or other control. They usually display a list of choices, with one choice per line, but can also show a rich content."
src/pages/components/menu/index.html,菜单的底层靠<code>md-popover</code>组件以及<code>popper.js</code>库驱动。,Menu component is driven by<code>md-popover</code>component and<code>popper.js</code>library.
src/pages/components/menu/index.html,弹出位置,Placement
src/pages/components/menu/index.html,默认的弹位置是<code>bottom-start</code>，支持所有<code>popper.js</code>的位置（placement）参数。,Default placement is bottom-start. Support all placements of popper.js
src/pages/components/menu/index.html,位移,Offset
src/pages/components/menu/index.html,"默认情况下，会自动计算菜单的弹出位移。可以通过设置<code>offset=""0""</code>来禁用位移，或指定自定义的位移值。","Menu will have auto calculated offset by default. Set<code>offset=""0""</code>to disable offset, or any custom offset value."
src/pages/components/menu/index.html,大小,Sizes
src/pages/components/menu/index.html,<code>md-menu</code>可以指定 4 种大小之一，或指定为自动适应内容。,<code>md-menu</code>has 4 different sizes and an auto mode:
src/pages/components/menu/index.html,菜单最大宽度为 280px，如果需要更大的宽度，请使用 css 设置。,The max-width of a menu is 280px.
src/pages/components/menu/index.html,自动关闭,Auto close
src/pages/components/menu/index.html,菜单可以指定为在单击或选择后自动关闭。,<code>md-menu</code>can be auto closed on click or select:
src/pages/components/menu/index.html,丰富的信息和对齐,Rich Content and Icon Alignment
src/pages/components/menu/index.html,可以动态切换菜单，还可以在<code> md-menu-content</code>中显示任意内容，例如此卡片示例：,"Sometimes you may need to toggle your menu dynamically. You can also show arbitrary content inside a<code>md-menu-content</code>, like this card example:"
src/pages/components/pagination/api.ts,名称,Name
src/pages/components/pagination/api.ts,描述,Description
src/pages/components/pagination/api.ts,默认值,Default
src/pages/components/pagination/api.ts,数据总量。,Set total data count. Used to calculate total page count.
src/pages/components/pagination/api.ts,每页的数据量。,Set data count of each page. Used to calculate total page count.
src/pages/components/pagination/api.ts,是否启用每页数量选择器。指定为具体的数组，则使用自定义的选项；指定为 true 使用默认的选项。,"Enable each page size select, use default options or specified options."
src/pages/components/pagination/api.ts,设置当前页号。页码从 1 开始计数。,Set current page index. Must be greater or equal than 1.
src/pages/components/pagination/api.ts,设置最大页码导航按钮数量。,Set max pagination navigation item count.
src/pages/components/pagination/api.ts,启用页码快速跳转功能,Enable quick page index jumper.
src/pages/components/pagination/api.ts,展示数据总量的提示信息。,Show total data size tip.
src/pages/components/pagination/api.ts,禁用整个分页组件。,Disable whole pagination.
src/pages/components/pagination/api.ts,指定正在加载的页码。如果该属性值大于 0，则会禁用整个分页组件，并在正在加载的页码按钮上展示 md-pinner。,Disable whole pagination and show loading spinner when loadingPage is greater than 0.
src/pages/components/pagination/api.ts,当计算出来的总页码数量小于等于 1 时，隐藏分页组件。,Hide whole pagination when total page is less or equal than 1.
src/pages/components/pagination/api.ts,参数,Parameters
src/pages/components/pagination/api.ts,当分页参数（包括当前页码和每页数据量）发生变化时触发。,Triggered when pagination is changed.
src/pages/components/pagination/api.ts,游标数组，如果最后一个元素为 null，则说明已经到最后一页。,"Cursor array. If the last element is null, the last page has been reached."
src/pages/components/pagination/api.ts,当总页码数量等于 1 时（游标数组仅有一个 null 元素），隐藏分页组件。,"When the total number of page numbers is equal to 1 (the cursor array has only one null element), the paging component is hidden."
src/pages/components/pagination/api.ts,当分页参数（包括当前游标和每页数据量）发生变化时触发。,Triggered when the paging parameters (including the current cursor and the amount of data per page) change.
src/pages/components/pagination/examples/disabled.html,禁用整个分页组件：,Disable whole Pagination:
src/pages/components/pagination/examples/disabled.html,提示正在加载某页：,Prompt loading a page:
src/pages/components/pagination/examples/full.html,使用默认的每页个数选择器列表：,Use the default list of count per page selectors:
src/pages/components/pagination/examples/full.html,使用自定义的每页个数选择器列表：,Use a custom list of count per page selectors:
src/pages/components/pagination/index.html,分页,Pagination
src/pages/components/pagination/index.html,采用分页的形式分隔长列表，每次只加载一个页面。,"Use pagination to separate long lists, loading only one page at a time."
src/pages/components/pagination/index.html,基础分页,Basic Paginations
src/pages/components/pagination/index.html,基础分页只包括页码按钮。,Basic pagination include only navigation buttons.
src/pages/components/pagination/index.html,完整分页,Full Paginations
src/pages/components/pagination/index.html,完整分页包括页码按钮、每页个数选择、快速跳转页码以及展示数据总条数功能。每个功能都可以通过参数独立控制是否使用。,"Full pagination includes navigation buttons, number of per page selection, quick page index jumper, and display the total number of data. Each function can be independently controlled by attributes."
src/pages/components/pagination/index.html,禁用分页,Disable Pagination
src/pages/components/pagination/index.html,"有两种情况需要禁用(Disabled)分页，某些需求下需要禁用整个分页，或当正在加载某一页的数据时提示用该页正在加载并且禁用分页以避免重复提交。
      后者是业务中最常见的情况。为此，提供了<code>disabled</code>和<code>loadingPage</code>两个参数。请参看<code>表格（Table）</code>组件
      的示例中，有一个完整的分页组件和表格展示搭配的例子。","There are two cases where you need to disable pagination. One case is in some situation you need to disable the entire paging. Another case is when loading data for a page, you are prompted to use the page being loaded and disable paging to avoid repeated submissions. The latter is the most common situation in business. To do this, two attributes are provided:<code>disabled</code>and<code>loadingPage</code>. Please see the<code>Table</code>component for an example. There is a complete example of paging components and tables."
src/pages/components/pagination/index.html,只支持[第一页/上一页/下一页]的轻量分页,Lighweight pagination which only supports [first page/previous page/next page]
src/pages/components/pagination/index.html,"轻量分页组件用于不统计总页码，使用游标（cursor）来进行分页的情况。
      多用于数据量很大需要高效分页的情形，这类情况下会牺牲一定的用户体验来换取性能，
      比如无法直观看到总页码，也不能随意跳转到任意页码。","The lightweight paging component is used for cases where the total page number is not counted and the cursor is used for paging. It is mostly used in cases where a large amount of data requires efficient paging. In such cases, a certain user experience is sacrificed in exchange for performance. For example, you cannot visually see the total page number, and you cannot jump to any page number."
src/pages/components/popconfirm/api.ts,名称,Name
src/pages/components/popconfirm/api.ts,描述,Description
src/pages/components/popconfirm/api.ts,默认值,Default
src/pages/components/popconfirm/api.ts,文字提示的内容,Content of popconfirm.
src/pages/components/popconfirm/api.ts,如果指定该属性，会显示错误提示。,"If this attribute is specified, an error message is displayed."
src/pages/components/popconfirm/api.ts,点击确认按钮后是否隐藏气泡。,Whether to hide the Popconfirm after clicking the confirm button.
src/pages/components/popconfirm/api.ts,是否进入正在确认的加载状态,Whether to enter the loading state being confirmed.
src/pages/components/popconfirm/api.ts,同 Popover 组件,Same as<code>md-popover</code>.
src/pages/components/popconfirm/api.ts,参数,Parameters
src/pages/components/popconfirm/api.ts,用户点击确认按钮,Triggered when Ok button clicked.
src/pages/components/popconfirm/api.ts,用户点击取消按钮,Triggered when Cancel button clicked.
src/pages/components/popconfirm/examples/simple.html,简单的 Popconfirm：,Simple Popconfirm:
src/pages/components/popconfirm/examples/simple.html,您确认要删除 ${some.name} 吗？,Are you sure to delete ${some.name}?
src/pages/components/popconfirm/examples/simple.html,删除,Delete
src/pages/components/popconfirm/examples/simple.html,配合服务器端 API 接口：,With server-side API interface:
src/pages/components/popconfirm/examples/simple.ts,未命名,Untitled
src/pages/components/popconfirm/examples/simple.ts,删除成功！,Delete successful!
src/pages/components/popconfirm/index.html,气泡确认框,Popconfirm
src/pages/components/popconfirm/index.html,目标元素的操作需要用户进一步的确认时，在目标元素附近弹出浮层提示，询问用户。,"When the operation of the target element requires further confirmation by the user, a floating layer prompt pops up near the target element and asks the user."
src/pages/components/popconfirm/index.html,和 DialogConfirm 弹出的全屏居中模态对话框相比，交互形式更轻量。,"Compared with the full-screen centered modal dialog box popped up by DialogConfirm, the interactive form of Popconfirm is more lightweight."
src/pages/components/popconfirm/index.html,Popover 组件的所有 API 也可用于 Popconfirm 组件。但部分属性的默认值不同。,All APIs of the Popover component are also available for the Popconfirm component. But some properties have different default values.
src/pages/components/popover/api.ts,名称,Name
src/pages/components/popover/api.ts,描述,Description
src/pages/components/popover/api.ts,默认值,Default
src/pages/components/popover/api.ts,控制气泡卡片是否展示。外部父组件可通过此属性手动控制。,Controls whether Popover are displayed.
src/pages/components/popover/api.ts,"气泡卡片的触发方式，包括 click, hover 和 none。如果指定为 none，代表气泡卡片不自动绑定触发元素，完全靠 active 属性控制。","The trigger method of the Popover, including<code>click</code>,<code>hover</code>and<code>none</code>. If it is specified as<code>none</code>, it means that the Popover will not automatically bound to the trigger element, and is completely controlled by the active property."
src/pages/components/popover/api.ts,卡片在延迟一定的时间后显示，单位为毫秒。,"The Popover displayed after a certain delay, in milliseconds."
src/pages/components/popover/api.ts,卡片显示时的相对位置，参看 Popper.js 的 placement 概念。,Placement of Popover. See docs of popper.js.
src/pages/components/popover/api.ts,卡片显示时的偏移量，参看 Popper.js 的 offset 概念。,Offset of Popover. See docs of popper.js.
src/pages/components/popover/api.ts,附加在卡片的 DOM 上的 html class。,HTML class add to Popover conent element.
src/pages/components/popover/api.ts,卡片显示和隐藏时的 css 动画。,CSS animation when Popover are shown and hidden.
src/pages/components/popover/api.ts,点击卡片之外的其它区域时，是否隐藏卡片。,Whether to hide the Popover when outside body is clicked.
src/pages/components/popover/api.ts,Popper.js 的更多自定义高级配置。,More custom advanced configuration for Popper.js.
src/pages/components/popover/api.ts,用于控制气泡里面顶部的标题样式。,Specify the title class.
src/pages/components/popover/api.ts,控制气泡里面中间的内容样式。,Specify the content class.
src/pages/components/popover/api.ts,控制气泡里面底部的按钮区域样式。,Specify the bottom actions class
src/pages/components/popover/api.ts,参数,Parameters
src/pages/components/popover/api.ts,气泡显示或隐藏时的事件,Triggered when Popover show or hide.
src/pages/components/popover/examples/simple.html,简单地使用内置 Trigger 触发气泡卡片展示和隐藏：,Simply trigger Popover show and hide:
src/pages/components/popover/examples/simple.html,通过父组件里的参数控制气泡的显示和隐藏：,Show and hide the Popover through the attribute passed from the parent component:
src/pages/components/popover/index.html,气泡卡片,Popover
src/pages/components/popover/index.html,当目标元素有进一步的描述和相关操作时，可以收纳到卡片中，根据用户的操作行为进行展现。点击/鼠标移入元素，弹出气泡式的卡片浮层。,A simple popup menu to provide extra information or operations.The floating card popped by clicking or hovering.
src/pages/components/popover/index.html,和<code>Tooltip</code>的区别是，用户可以对浮层上的元素进行操作，因此它可以承载更复杂的内容，比如链接或按钮等。,"Comparing with<code>Tooltip</code>, besides information Popover card can also provide action elements like links and buttons."
src/pages/components/progress/api.ts,名称,Name
src/pages/components/progress/api.ts,描述,Description
src/pages/components/progress/api.ts,默认值,Default
src/pages/components/progress/api.ts,设置进度条的模式。请参见下面每种模式的详细说明。,Set the mode the progress. See below the detailed description of each mode.
src/pages/components/progress/api.ts,默认模式，与 <code>md-value</code> 属性一起使用。指定 0％ 到 100％ 之间的某个进度。,The default mode. Works along with<code>md-value</code>prop. Apply a 0% to 100% loading bar.
src/pages/components/progress/api.ts,创建一个不指定具体进度，持续加载状态的进度条,Create a indeterminate loading bar
src/pages/components/progress/api.ts,创建用于提示正在查询的进度条。在检索大量内容时很有用。,Create a loading bar for queries. Useful when retrieving a lot of contents.
src/pages/components/progress/api.ts,创建带有缓冲区的进度条，常用于指示视频加载进度。,Create a loading bar with a buffer. Commonly used in videos.
src/pages/components/progress/api.ts,当前进度的值，支持 0 到 100 的数字。,The current progress amount. From 0 to 100.
src/pages/components/progress/api.ts,当前缓冲量的值，支持 0 到 100 的数字。,The current buffer amount. From 0 to 100.
src/pages/components/progress/index.html,进度条,Progress Bar
src/pages/components/progress/index.html,进度条用于应用程序加载内容的视觉提示。,Progress indicators are visual indications of an app loading content.
src/pages/components/progress/index.html,针对不同应用程序可能的需要，进度条提供提供了 4 种类型：确定，不确定，查询或缓冲区。,"Progress bars have 4 types for each operation that your application may need: Determinate, Indeterminate, Query or Buffer."
src/pages/components/progress/index.html,确定进度条用于指示已完成的百分比。,When indicators are determinate they indicate how long an operation will take when the percentage complete is detectable.
src/pages/components/progress/index.html,当无法确定当前已完成的进度，只是提示用户等待正在进行的操作，可以使用不确定进度条。,When indicators are indeterminate they request that the user wait while something finishes when it’s not necessary to indicate how long it will take.
src/pages/components/progress/index.html,处理流媒体视频等媒体内容时，我们可以使用进度条在视频上显示缓冲进度指示器。,When dealing with media content like streaming videos we can use progress bars to show the buffering progress indicator on a video.
src/pages/components/progress/index.html,当搜索或过滤大量数据时，可以使用查询进度条，以告诉用户正在检索某些内容。,"When searching or filtering a large amount of data, we can show a query progress bar. This will tell the user that some content is being retrieved."
src/pages/components/radio/api.ts,名称,Name
src/pages/components/radio/api.ts,描述,Description
src/pages/components/radio/api.ts,默认值,Default
src/pages/components/radio/api.ts,点击选中时通过 change 事件向外传递的值,Value emited when radio is checked.
src/pages/components/radio/api.ts,是否为选中状态,Whether the radio is checked.
src/pages/components/radio/api.ts,唯一标识,The radio unique id.
src/pages/components/radio/api.ts,用于标识分组的 name，会传递给原生 input，实现多个 radio 关联,The name used to identify the group will be passed to the native input to implement multiple radio associations.
src/pages/components/radio/api.ts,参数,Parameters
src/pages/components/radio/api.ts,选中的值变化时触发,Triggered when selected value changed.
src/pages/components/radio/examples/simple-radios.html,描述,Description
src/pages/components/radio/examples/simple-radios.html,示例,Example
src/pages/components/radio/examples/simple-radios.html,值,Value
src/pages/components/radio/examples/simple-radios.html,简单选择项,Simple Radio
src/pages/components/radio/examples/simple-radios.html,字符串数组,Array of String
src/pages/components/radio/examples/simple-radios.html,Object 数组,Array of Object
src/pages/components/radio/examples/simple-radios.html,未选择,Not Selected
src/pages/components/radio/examples/simple-radios.ts,小葛,Mr. Ge
src/pages/components/radio/examples/simple-radios.ts,小明,Mr. Ming
src/pages/components/radio/examples/simple-radios.ts,小王,Ms. Wang
src/pages/components/radio/index.html,单选项,Radio
src/pages/components/radio/index.html,单选按钮允许用户从一组选项中选择唯一一个选项。如果认为用户需要并排查看所有可用选项，请使用单选按钮进行独占选择。,Radio buttons allow the user to select one option from a set. Use radio buttons for exclusive selection if you think that the user needs to see all available options side-by-side.
src/pages/components/radio/index.html,浏览器原生<code>&lt;input type=&quot;radio&quot;&gt;</code>标签上可以使用的属性，比如<strong>name</strong>和<strong>required</strong>等，也可以被应用到<code>md-radio</code>组件上。,"All other<code>&lt;input type=&quot;radio&quot;&gt;</code>attributes, such as <strong>name</strong> and <strong>required</strong>, can be used on<code>md-radio</code>."
src/pages/components/select/api.ts,名称,Name
src/pages/components/select/api.ts,描述,Description
src/pages/components/select/api.ts,默认值,Default
src/pages/components/select/api.ts,绑定到下拉选择组件的值,Value bind to select.
src/pages/components/select/api.ts,占位提示信息,The select placeholder. Similar to HTML5 placeholder attribute.
src/pages/components/select/api.ts,指定是否必须选择一项,The select required. Similar to HTML5 required attribute.
src/pages/components/select/api.ts,唯一标识,The select id. Similar to HTML5 id attribute.
src/pages/components/select/api.ts,禁用下拉选择组件,Disable the select and prevent it selection.
src/pages/components/select/api.ts,创建一个带有复选框的多重选择。需要搭配传递 <code>Array</code> 类型的 <code>value</code> 属性。,Create a multi selection with checkboxes inside. Only works with a<code>value</code>with an<code>Array</code>type.
src/pages/components/select/api.ts,使用紧凑型布局,Enable the dense layout
src/pages/components/select/api.ts,参数,Parameters
src/pages/components/select/api.ts,选项发生变化时触发,Triggered when selection changes.
src/pages/components/select/api.ts,下拉框打开时触发,Triggered when select is opened.
src/pages/components/select/api.ts,下拉框关闭时触发,Triggered when select is closed.
src/pages/components/select/api.ts,单个选择项的值。,The option value. This is used to bind to<code>md-select</code>model
src/pages/components/select/api.ts,禁用单个选择项,Disable the option and prevent it selection.
src/pages/components/select/api.ts,分组的标签,The group label
src/pages/components/select/api.ts,禁用分组并阻止选择其中的所有选择项。,Disable the optgroup and prevent the selection of all options inside.
src/pages/components/select/index.html,下拉选择,Select
src/pages/components/select/index.html,下拉选择可用于在多个选项之间进行选择，可以选择一个或多个选项。组件显示当前状态和向下箭头。,A select picks between multiple options. The select displays the current state and a down arrow. They can have single selection or multiple.
src/pages/components/select/index.html,<code>md-select</code>组件可兼容原生<code>select</code>标签的各种属性，包括<code>required</code>和<code>multiple</code>等。,Select component mimics the HTML5<code>&lt;select&gt;</code>attributes. This means that you can add attributes like<code>required</code>and<code>multiple</code>and it will react to them to give the best experience.
src/pages/components/select/index.html,<code>md-select</code>需要和<code>md-option</code>组件搭配使用，后者提供可能的选择项，且必须指定<code>value</code>属性。同时，<code>md-select</code>组件应该在<code>md-field</code>组件内使用。,<code>md-select</code>works along with<code>md-option</code>component to provide the possible selection options. You should use it inside the<code>md-field</code>component.
src/pages/components/select/index.html,如果向<code>md-select</code>传递的<code>value</code>属性是数组，则代表使用多选功能。,"If the<code>value</code>attribute passed to<code>md-select</code>is an array, then multiple selection is used."
src/pages/components/select/index.html,可以使用紧凑型布局，以便在屏幕上容纳更多项目：,There is also a dense layout to accommodate more items on the screen:
src/pages/components/select/index.html,可以对选择项进行分组，以便于区分不同的数据集：,Selects can have groups to make easy to distinguish different data sets:
src/pages/components/select/index.html,可以禁用整个下拉选择组件，也可以禁用单个选择项，或禁用某个分组。通过指定<code>disabled</code>属性来实现：,"It is really easy to disable a select, option and even an optgroup. This will prevent them from being selected. Just pass a<code>disabled</code>prop to the desired component:"
src/pages/components/snackbar/api.ts,名称,Name
src/pages/components/snackbar/api.ts,描述,Description
src/pages/components/snackbar/api.ts,默认值,Default
src/pages/components/snackbar/api.ts,控制消息提示的展示和关闭,Option used to trigger the snackbar visibility.
src/pages/components/snackbar/api.ts,设置自动关闭消息提示之前的持续时间（以毫秒为单位）。设置为 0 则不自动关闭，需要手动处理。,Sets the duration in milliseconds before close the snackbar.
src/pages/components/snackbar/api.ts,设置消息提示在屏幕底部的位置,Sets the snackbar position on the bottom of the screen.
src/pages/components/snackbar/api.ts,设置消息提示位于中心位置,Make the snackbar centered.
src/pages/components/snackbar/api.ts,设置消息提示位于左侧位置,Make the snackbar left aligned.
src/pages/components/snackbar/api.ts,参数,Parameters
src/pages/components/snackbar/api.ts,消息提示打开时触发,Triggered when a snackbar opens.
src/pages/components/snackbar/api.ts,消息提示关闭时触发,Triggered when a snackbar closes.
src/pages/components/snackbar/examples/regular.html,打开消息提示,Open snackbar
src/pages/components/snackbar/examples/regular.html,连接超时。巴拉巴拉的错误提示信息...,Connection timeout. Some error message...
src/pages/components/snackbar/examples/regular.html,确认,Ok
src/pages/components/snackbar/index.html,消息提示,Snackbar
src/pages/components/snackbar/index.html,消息提示组件通过屏幕底部的消息提供有关操作的简短反馈。,Snackbars provide brief feedback about an operation through a message at the bottom of the screen.
src/pages/components/snackbar/index.html,它们可以在屏幕上具有自定义的持续时间，也可以是持续的。可以居中或左对齐。,They can have a custom duration on the screen or be persistent. It can be centered or left aligned.
src/pages/components/snackbar/index.html,在移动设备上，消息提示将占满整个宽度空间。,On mobile devices the snackbar will fit the whole width space.
src/pages/components/snackbar/index.html,持续时间和位置,Duration and position
src/pages/components/snackbar/index.html,在 js 代码里调用,Static method
src/pages/components/snackbar/index.html,除了直接在 html 模板里使用<code>md-snackbar</code>组件外，也可以在 js 代码里直接通过调用<code>Snackbar.show</code>来展示消息。,"In addition to using the<code>md-snackbar</code>component directly in the html template, you can also display the message by calling<code>Snackbar.show</code>directly in the js code."
src/pages/components/spinner/api.ts,名称,Name
src/pages/components/spinner/api.ts,描述,Description
src/pages/components/spinner/api.ts,默认值,Default
src/pages/components/spinner/api.ts,指示进度的值。当不指定该参数时，spinner 表现为旋转加载状态；当指定该参数时，spinner 表现为进度条。,"A value indicating progress. When this parameter is not specified, the spinner appears as a spin loading state; when this parameter is specified, the spinner appears as a progress bar."
src/pages/components/spinner/api.ts,"图标大小，可以指定为数字，也可以指定为 css 字符串值，还可以指定为 ""small""/""normal""/""large"" 三者之一（依次对应 36px, 48px, 64px）","Icon size can be specified as a number, as a css string value, or as one of the ""small""/""normal""/""large""(corresponds to 36px, 48px, 64px)."
src/pages/components/spinner/api.ts,指定使用 primary 颜色。,Use primary color.
src/pages/components/spinner/api.ts,指定使用 secondary 颜色。,Use secondary color.
src/pages/components/spinner/api.ts,当需要将 Spinner 和文本混合排版时，如果父元素没有使用 flex 布局，则需要使用 md-ajust-baseline 来调整 Baseline。,"When you need to typeset Spinner and text, if the parent element does not use flex layout, you need to use md-ajust-baseline to adjust the baseline."
src/pages/components/spinner/examples/button.html,放在文字前面的 Spinner,Spinner before text
src/pages/components/spinner/examples/button.html,提交,Submit
src/pages/components/spinner/examples/button.html,搜索,Search
src/pages/components/spinner/index.html,加载指示,Spinner
src/pages/components/spinner/index.html,"该组件常用于指示正在加载、正在提交等状态，也可用于具体指示加载的进度。为了简化 API，
      通过是否指定<code>value</code>属性来决定 Spinner 属于哪个类型。","This component is often used to indicate the state of loading, submitting, etc., and can also be used to specifically indicate the progress of loading. To simplify the API, decide whether a Spinner belongs to a type by specifying a<code>value</code>attribute."
src/pages/components/spinner/index.html,指定<code>value</code>属性时，属于指示具体加载进度的 Spinner，<code>value</code>属性为 0-100 的数字。,"When the<code>value</code>attribute is specified, it is a spinner that indicates the specific loading progress, and the<code>value</code>attribute is a number from 0-100."
src/pages/components/spinner/index.html,"不指定<code>value</code>属性时，属于指示正在加载状态的 Spinner,
      Spinner 表现为一个旋转的加载动画。","When the<code>value</code>attribute is not specified, Spinner indicating the loading state, and it appears as a rotating loading animation."
src/pages/components/spinner/index.html,指示正在加载状态的 Spinner,Spinner indicating the loading state
src/pages/components/spinner/index.html,指示具体的加载进度的 Spinner,Spinner indicating specific load progress
src/pages/components/spinner/index.html,在按钮中使用 Spinner,Use Spinner in Button
src/pages/components/spinner/index.html,"默认情况下，Spinner 的大小为<code>1em</code>（即字号大小），颜色为<code>currentColor</code>（即文字颜色）。
        在实际使用时，可以通过调整父元素的字号和颜色来改变 Spinner 的大小和颜色，也可以通过以下接口来调整：","By default, the size of Spinner is<code>1em</code>(the font size) and the color is<code>currentColor</code>(the text color). In actual use, you can change the size and color of the spinner by adjusting the font size and color of the parent element, or you can adjust it through the following classes:"
src/pages/components/steppers/api.ts,名称,Name
src/pages/components/steppers/api.ts,描述,Description
src/pages/components/steppers/api.ts,默认值,Default
src/pages/components/steppers/api.ts,指定当前激活的步骤，可以是数字索引，或某个步骤的 id。,"Specifies the currently active step, which can be a numeric index or the id of a step."
src/pages/components/steppers/api.ts,使用替代布局,Change the steppers into a alternative layout
src/pages/components/steppers/api.ts,使用垂直布局，通常用于移动平台。,Change the steppers into a vertical orientation. For mobile.
src/pages/components/steppers/api.ts,使用线性工作流模式。,Set steppers to work in a linear flow.
src/pages/components/steppers/api.ts,自动计算步骤的高度，并在它们之间使用高度过渡。,Calculate the stepper height automatically and add an awesome height transition between them.
src/pages/components/steppers/api.ts,参数,Parameters
src/pages/components/steppers/api.ts,当前激活步骤发生变化时触发,Triggered when the active stepper changes
src/pages/components/steppers/api.ts,唯一标识，可用于和 activeStep 属性配合指定当前激活步骤,The step id. Used when changing the active step dynamically
src/pages/components/steppers/api.ts,步骤的标签文本,The step label
src/pages/components/steppers/api.ts,步骤的描述文本。如果某个步骤是可选的，请使用此属性说明。,"The step description. When a step is optional, use this prop to tell the user that."
src/pages/components/steppers/api.ts,错误消息。设置此属性后，步骤将自动变成错误状态。要清除错误，请将此属性设置为 null。,"The error message. When set, the stepper will automatically raise an error. To clear the error, set this variable as null."
src/pages/components/steppers/api.ts,将此属性设置为 true 可提示特定步骤已完成。,Set this prop to true to tell that a particular step is finished.
src/pages/components/steppers/api.ts,使步骤可编辑或不可编辑。,Make a step editable or non editable.
src/pages/components/steppers/examples/horizontal.html,第一步,First Step
src/pages/components/steppers/examples/horizontal.html,第二步,Second Step
src/pages/components/steppers/examples/horizontal.html,第三步,Third Step
src/pages/components/steppers/index.html,步骤条,Steps
src/pages/components/steppers/index.html,步骤条通过一串顺序编号的步骤显示进度。它们也可以用于导航，并且有两种主要类型：水平或垂直。水平类型可以具有其他布局。,Steppers display progress through a sequence of logical and numbered steps. They may also be used for navigation and have two main types: Horizontal or Vertical. The horizontal type can have an alternative layout.
src/pages/components/steppers/index.html,默认情况下，各个步骤都是可编辑的，并且是可选的。,"Individual steps are editable and optional by default, but you can change that."
src/pages/components/steppers/index.html,水平步骤条,Horizontal Steppers
src/pages/components/steppers/index.html,当一个步骤的内容取决于较早的步骤时，水平步骤条是理想的选择。应该避免在水平步骤条中使用较长的步骤名。,Horizontal steppers are ideal when the contents of one step depend on an earlier step. You should avoid using long step names in horizontal steppers.
src/pages/components/steppers/index.html,这是步骤条的默认类型。不建议将它用于移动设备：,This is the default type of steppers. They are not recommended for mobile:
src/pages/components/steppers/index.html,他们还可以使用其他布局来更加强调步骤标题：,They can also have a alternative layout to give greater emphasis to the steps titles:
src/pages/components/steppers/index.html,垂直步骤条,Vertical Steppers
src/pages/components/steppers/index.html,垂直步骤条非常适合用于移动设备或插入对话框及卡片等应用程序的小区域。,"Vertical steppers are great deal for mobile devices or to be inserted on small areas of your application, like a dialog or a card."
src/pages/components/steppers/index.html,线性工作流,Linear Steppers
src/pages/components/steppers/index.html,默认情况下，步骤是可选的，这意味着您可以前进到最后一步，而无需先完成前面的其他步骤。但是有时我们会通过线性流程引导用户，所有步骤都很重要或连接在一起。线性步骤条要求用户完成前一个步骤才能继续进行下一个步骤：,y default steps are optional and this means that you can advance to the last step without pass through the other ones. But sometimes we're guiding an user through a linear flow and all steps matter or are connected together. Linear steppers require users to complete one step in order to move on to the next:
src/pages/components/steppers/index.html,不可编辑,Non Editable Steps
src/pages/components/steppers/index.html,默认情况下，步骤也是可编辑的。可以通过手动设置每个不可编辑的步骤来禁用此功能。通常适用于，当用户以后无法编辑某个步骤或步骤编辑对完成表单构成干扰时：,By default steps are also editable. But you can disable this by manually setting on each step that could be non-editable. This makes sense when users cannot edit a step later or when step editing poses a distraction risk to form completion:
src/pages/components/subheader/index.html,子标题,Subheader
src/pages/components/subheader/index.html,子标题是用于描述列表或网格列表各部分的列表图块。,Subheaders are list tiles that delineate sections of a list or grid list.
src/pages/components/subheader/index.html,子标题可以在列表，网格甚至选择中使用，并且通常与过滤或排序标准有关。它们非常适合导航面板和网格列表。,"The subheader can be used in lists, grid and even on selects and are typically related to filtering or sorting criteria. They fit well in navigation panels and grid lists."
src/pages/components/subheader/index.html,子标题组件没有可配置的属性。,This component does not have any extra option.
src/pages/components/switch/examples/array-switch.html,描述,Description
src/pages/components/switch/examples/array-switch.html,示例,Example
src/pages/components/switch/examples/array-switch.html,值,Value
src/pages/components/switch/examples/array-switch.html,简单字符串数组,Simple array of String
src/pages/components/switch/examples/array-switch.html,城市开关：,City switch:
src/pages/components/switch/examples/array-switch.html,Object 数组,Array of Object
src/pages/components/switch/examples/array-switch.html,用户开关：,User switch:
src/pages/components/switch/examples/array-switch.ts,小葛,Mr. Ge
src/pages/components/switch/examples/array-switch.ts,小明,Mr. Ming
src/pages/components/switch/examples/array-switch.ts,小王,Ms. Wang
src/pages/components/switch/examples/single-switch.html,描述,Description
src/pages/components/switch/examples/single-switch.html,示例,Example
src/pages/components/switch/examples/single-switch.html,值,Value
src/pages/components/switch/examples/single-switch.html,无任何属性的最简单切换按钮,Simplest switch without any attribute
src/pages/components/switch/examples/single-switch.html,标签,Label
src/pages/components/switch/examples/single-switch.html,(无),(none)
src/pages/components/switch/examples/single-switch.html,传递简单的布尔值,Pass simple Boolean
src/pages/components/switch/examples/single-switch.html,传递简单的字符串值,Pass simple String
src/pages/components/switch/examples/single-switch.html,自动更新,Auto update
src/pages/components/switch/examples/single-switch.html,传递 Object 值,Pass Object
src/pages/components/switch/index.html,切换按钮,Switch
src/pages/components/switch/index.html,"切换按钮可以理解成多选框的另一种展示方式，其核心逻辑和多选框完全一样。
      因此，切换按钮也分为单一模式和数组模式，且 API 接口和多选框完全一样。","The switch component can be understood as another way to display the checkbox. Its core logic is exactly the same as the checkbox. Therefore, the toggle button is also divided into single mode and array mode, and the API interface and checkbox are exactly the same."
src/pages/components/switch/index.html,单一模式的切换按钮，这种模式是最常见的使用模式。,"Single mode switch, this mode is the most common usage mode."
src/pages/components/switch/index.html,数组模式的切换按钮，这种模式很少使用。典型的使用场景就是配置由个开关组成的开关分组。,"Array mode switch, this mode is rarely used. A typical use scenario is to configure a switch group consisting of switches."
src/pages/components/switch/index.html,和<code>md-checkbox</code>完全一样，请参看<code>md-checkbox</code>的 API 文档。,"It is exactly the same as<code>md-checkbox</code>, please refer to the API documentation of<code>md-checkbox</code>."
src/pages/components/table/api.ts,名称,Name
src/pages/components/table/api.ts,描述,Description
src/pages/components/table/api.ts,默认值,Default
src/pages/components/table/api.ts,指定表格的数据。必须是数组，数组每个元素是一行数据。,"Specify the data for the table. Must be an array, and each element of the array is a row of data."
src/pages/components/table/api.ts,表格是否开启可选择模式。,Specify the Table is selectable.
src/pages/components/table/api.ts,当表格处于可选择模式时，指定表格的已选择行。,"When the table is selectable, specifies the selected rows of the table."
src/pages/components/table/api.ts,传递给行循环使用的 <code>&lt;for&gt;</code> 组件的 key。,The 'key' attribute passed to the<code>&lt;for&gt;</code>component used by the rows loop.
src/pages/components/table/api.ts,传递给列循环使用的 <code>&lt;for&gt;</code> 组件的 key。,The 'key' attribute passed to the<code>&lt;for&gt;</code>component used by the columns loop.
src/pages/components/table/api.ts,参数,Parameters
src/pages/components/table/api.ts,表格的选中行发生变化时触发。只在表格开启选择模式时有效。,Fires when the selected row of the table changes. Only valid when the table is selectable.
src/pages/components/table/api.ts,表头的文本。可以不指定该属性，然后用 slot 来渲染自定义表头。,"Header text. You can not specify this property, and then use slot to render the custom header."
src/pages/components/table/api.ts,数据的属性。用于从行数据中获取属性值并展示到单元格里。可以不指定该属性，然后用 slot 来渲染自定义单元格。,"The property of the row data. Used to get property value and display it. Instead of specifying this property, you can use slot to render custom cells."
src/pages/components/table/api.ts,指定当前列是否是数值类型。数值类型的列会右对齐。,Specifies whether the current column is a numeric type. Numeric columns are right-aligned.
src/pages/components/table/index.html,表格,Table
src/pages/components/table/index.html,表格组件用于显示原始数据集，通常被用在桌面（而不是移动平台）产品中。表格组件支持许多属性来更改和影响布局。,Data tables display sets of raw data. They usually appear in desktop enterprise products. There are a lot of options that you can tweak to change and impact the table layout.
src/pages/components/table/index.html,"虽然 Jinge Material 项目<router-link to=""about"">移植自 Vue Material</router-link>，但表格组件的接口和使用的设计，参考的是<a href=""https://element.eleme.cn/"" target=""_blank"">Element</a>组件库。","Although the Jinge Material project is <router-link text=""ported from Vue Material"" to=""about""/>, the interface of the table component and the design used are based on the<a href=""https://element.eleme.cn/"" target=""_blank"">Element</a>library."
src/pages/components/table/index.html,基础表格,Basic Table
src/pages/components/table/index.html,表格由<code>md-table</code>和<code>md-table-column</code>两个组件构成。前者用于创建表格，后者用于在表格内定义每一列。,"The table consists of two components:<code>md-table</code>and<code>md-table-column</code>. The former is used to create the table, and the latter is used to define each column within the table."
src/pages/components/table/index.html,在卡片中的带工具栏的表格,Table with toolbar in card
src/pages/components/table/index.html,表格可以和其它组件搭配使用，比如添加工具栏并放置在卡片中：,"Table can be used with other components, such as adding toolbars and placing it in card:"
src/pages/components/table/index.html,可选模式,Selectable Table
src/pages/components/table/index.html,表格可开启可选择模式，该模式下可以通过 Checkbox 来选择行数据。,"Table can be selectable, in which rows can be selected through checkbox."
src/pages/components/table/index.html,自定义模版,Custom Template
src/pages/components/table/index.html,"可以通过为<code>md-table-column</code>指定 slot 来使用自定义模版。
      其中，传送默认的 slot，可指定表格内容(td)模版；传递 head slot，可指定表头(th)的模版。",You can use a custom template by specifying a slot for<code>md-table-column</code>. The default slot can specify the template of the table content (td); the head slot can specify the template of the header (th).
src/pages/components/table/index.html,"表头 slot 用于渲染每一个表头，可使用的数据包括 column 和 columnIndex。
      表格内容 slot 用于渲染每一行的每一个单元格，可使用的数据包括：",The header slot is used to render each header. The available data includes column and columnIndex. The table content slot is used to render each cell of each row. The available data includes:
src/pages/components/table/index.html,<code>data</code>: 单元格对应的行数据。,<code>data</code>: Row data corresponding to the cell.
src/pages/components/table/index.html,<code>index</code>: 单元格对应的行的索引。,<code>index</code>: Row Index corresponding to the cell.
src/pages/components/table/index.html,<code>selected</code>: 单元格对应的行是否被选中。只在表格开启可选模式下有用。,<code>selected</code>:Whether the row corresponding to the cell is selected. Only valid when the table is selectable.
src/pages/components/table/index.html,<code>column</code>: 单元格对应的列。,<code>column</code>: Column corresponding to the cell.
src/pages/components/table/index.html,<code>columnIndex</code>: 单元格对应的列的索引。,<code>columnIndex</code>: Column index corresponding to the cell
src/pages/components/table/index.html,行的自定义样式,Custom row style
src/pages/components/table/index.html,"如果表格的某一行需要有特别的样式，可以通过<code>rowClass</code>属性为该行指定额外的样式类。
      这个属性必须指定为函数，函数接收行数据，返回样式类。","If a particular row of a table needs to have a special style, you can specify an additional style class for that row via the<code>rowClass</code>attribute. This attribute must be specified as a function, which receives the row data and returns a style class."
src/pages/components/table/index.html,分页,Pagination
src/pages/components/table/index.html,表格的分页需要使用分页组件来配合实现：,The pagination of a table needs to be implemented with<code>md-pagination</code>:
src/pages/components/table/index.html,TODO: 实现包括固定表头，排序等更多丰富的功能。,"Implement more functions includes fixed-header, sorting and more."
src/pages/components/tabs/api.ts,名称,Name
src/pages/components/tabs/api.ts,描述,Description
src/pages/components/tabs/api.ts,默认值,Default
src/pages/components/tabs/api.ts,设置当前激活状态的标签页。可以指定为数字索引，也可以指定为 <code>md-tab</code> 组件的 id 属性值。,"Set the current selected tab. Works by providing the index of tab, or the id of the desired<code>md-tab</code>."
src/pages/components/tabs/api.ts,设置标签页的对齐方式。请参见下面每种布局的详细说明。,Sets the tab navigation alignment. See below the detailed description of each layout.
src/pages/components/tabs/api.ts,使用左对齐,Align the tabs navigation buttons to left
src/pages/components/tabs/api.ts,使用居中对齐,Align the tabs navigation buttons on center
src/pages/components/tabs/api.ts,使用右对齐,Align the tabs navigation buttons on right
src/pages/components/tabs/api.ts,标签页撑满屏幕可用空间,Make the navigation buttons to fill all the available space.
src/pages/components/tabs/api.ts,指定工具栏高度使用动态过渡。请谨慎使用使用此选项，以免降低页面性能。,Apply a dynamic transition to the table height. Be careful with this option to not hurt the performance of your page.
src/pages/components/tabs/api.ts,为标签页指定阴影(Elevation)，默认无阴影。,Add an elevation to tab navigation element.
src/pages/components/tabs/api.ts,参数,Parameters
src/pages/components/tabs/api.ts,当激活的标签页变化时触发。,Triggered when the active tab changes
src/pages/components/tabs/api.ts,唯一标识，可用于配合 active 属性指定激活的标签页。,The tab id. Used when changing the active tab dynamically
src/pages/components/tabs/api.ts,为标签页添加 html 超链接。,The tab href link. Useful when you want to change the current URL based on the tab.
src/pages/components/tabs/api.ts,标签页的文本,The tab label
src/pages/components/tabs/api.ts,禁用某个标签页,Disable/enable a tab
src/pages/components/tabs/api.ts,为标签页添加 jinge-router 的路由功能，指定目标路由状态。,Set router-link target state.
src/pages/components/tabs/api.ts,附加给标签页的额外数据。可用于传递给标签页内容的渲染 Slot。,"The data to be passed to the respective tab button, when using custom template."
src/pages/components/tabs/index.html,标签页,Tabs
src/pages/components/tabs/index.html,标签页也叫选项卡。使用标签页可以轻松浏览，在不同视图之间切换以及启用高级别的内容组织，例如不同的数据集或应用程序的功能方面。,"Tabs make it easy to explore, switch between different views and enable content organization at a high level, such as different data sets or functional aspects of an app."
src/pages/components/tabs/index.html,导航标签页,Navigational tabs
src/pages/components/tabs/index.html,可以使用标签页作为应用程序的主导航。标签页默认情况下可以和 jinge-router 无缝集成，可以像按钮或 router-link 组件一样使用<code>to</code>、<code>params</code>等属性。,"Sometimes you may need a tab to be the main navigational element of your application and you can do this.By default, tabs can be seamlessly integrated with jinge-router. You can use attributes like<code>to</code>,<code>params</code>like buttons or router-link components."
src/pages/components/tabs/index.html,标签页内容,Tab with inner content
src/pages/components/tabs/index.html,在前面的示例中，选项卡的工作原理与导航按钮相同，但没有内容。可以指定自定义内容。可以将任意内容传递到选项卡。可以与路由器同步：,"In the previous example, the tabs worked just like navigation buttons, without content. With that you would need to render the content by yourself. Although this is not a hard thing, because you can use Vue Router, you can pass arbitrary content to your tabs. And it can also work syncing with router:"
src/pages/components/tabs/index.html,对齐方式,Alignments
src/pages/components/tabs/index.html,选项卡具有四种类型的导航按钮对齐方式：左，中，右和固定。 您可以将它们与任何选项卡一起使用：,"Tabs have four types of alignments for the navigation buttons: Left, Center, Right and Fixed. You can use them with any tabs:"
src/pages/components/tabs/index.html,图标,Icons
src/pages/components/tabs/index.html,可以在标签页中使用图标，以使得用户更容易理解标签的内容：,"Tabs accept icons, to make it easier for your user to assimilate the contents of a tab:"
src/pages/components/tabs/index.html,自定义模版,Custom Template
src/pages/components/tabs/index.html,通过 slot 可以指定标签页里面的内容的自定义模板。下面是一个提示未读信息的简单示例：,"You can use a custom template for the navigation buttons. This will be applied to all navigation buttons and allows you to make updates on your tab, like this great example of unread/new content: Simple, uh?"
src/pages/components/toolbar/api.ts,名称,Name
src/pages/components/toolbar/api.ts,描述,Description
src/pages/components/toolbar/api.ts,默认值,Default
src/pages/components/toolbar/api.ts,设置工具栏的阴影（Elevation）,Sets the toolbar shadow elevation
src/pages/components/toolbar/api.ts,使用透明工具栏,Makes the Toolbar background transparent
src/pages/components/toolbar/api.ts,使用紧凑型布局,Creates a small sized toolbar
src/pages/components/toolbar/api.ts,使用中等大小的工具栏,Creates a medium sized toolbar
src/pages/components/toolbar/api.ts,使用大型工具栏,Creates a large sized toolbar
src/pages/components/toolbar/api.ts,创建工具栏行，通常在大型工具栏上使用,"Creates a toolbar row, commonly used on large toolbars"
src/pages/components/toolbar/api.ts,向任何工具栏行添加左偏移量，仅适用于 md-toolbar-row。,Adds an left offset to any toolbar row. Only works in md-toolbar-row
src/pages/components/toolbar/api.ts,在工具栏或工具栏行的左侧创建一个区域，该区域通常用于放置应用程序菜单按钮和标题。,Creates a section on the left of a toolbar or toolbar row. Commonly used to hold the application menu button and the title
src/pages/components/toolbar/api.ts,在工具栏或工具栏行的右侧创建一个区域，该区域通常用于放置工具栏的主要动作，例如更多操作的按钮。,"Creates a section on the right of a toolbar or toolbar row. Commonly used to hold the main action of a toolbar, such as overflow buttons"
src/pages/components/toolbar/api.ts,创建工具栏的标题。,Will create the toolbar title. Works inside or outside a toolbar row
src/pages/components/toolbar/index.html,工具栏,Toolbar
src/pages/components/toolbar/index.html,工具栏操作显示在受其操作影响的视图前面。工具栏会显示在受其影响的内容前面一个层阶。工具栏可以控制宽度来容纳其中的内容。,Toolbar actions appear above the view affected by their actions. They may constrain their width to accommodate material passing over them.
src/pages/components/toolbar/index.html,常规工具栏,Regular Toolbars
src/pages/components/toolbar/index.html,工具栏会根据屏幕宽度调整高度尺寸，以最适合小型设备上的可见区域。 尝试调整您的浏览器大小以查看区别：,Toolbars adjusts its height dimensions based on the screen width to best fit the visible area on small devices. Try to resize your browser to see the difference:
src/pages/components/toolbar/index.html,不同大小的工具栏,Different Sizes
src/pages/components/toolbar/index.html,内容和响应,Content and Actions
src/pages/components/toolbar/index.html,由于工具栏主要用于执行影响整个应用程序的操作，因此您可以在其中创建行或节。,"s the Toolbars are mostly used to hold actions that affects the entire application, you can create rows or sections inside of it."
src/pages/components/toolbar/index.html,尽管这些行适用于每个工具栏，但它们的创建是为了分隔大型工具栏的内容。该元素由<code>md-toolbar-row</code>类表示。行还可以具有<code>md-toolbar-offset</code>在其左侧添加一些空格。这通常在大型工具栏的第二行中使用。,"Although those rows works on every toolbar, they were created to separate contents for large toolbars. This element is represented by the<code>md-toolbar-row</code>class. A row can also have a<code>md-toolbar-offset</code>to add a little space on the left of it. This is commonly used inside the second row of an large toolbar."
src/pages/components/toolbar/index.html,这些部分用于水平拆分工具栏的内容（或内部的行）。可以使用两种类型的部分来应用它们：<code>md-toolbar-section-start</code>将左对齐，而<code>md-toolbar-section-end</code>右对齐。,The sections are used to split the content of the toolbar horizontally (or the row inside). You can apply them using two types of section:<code>md-toolbar-section-start</code>will be left-aligned and<code>md-toolbar-section-end</code>right-aligned.
src/pages/components/toolbar/index.html,以下的类用于构造工具栏中的各种元素。,The following classes creates parts of a toolbar:
src/pages/components/tooltip/api.ts,名称,Name
src/pages/components/tooltip/api.ts,描述,Description
src/pages/components/tooltip/api.ts,默认值,Default
src/pages/components/tooltip/api.ts,工具提示的内容,Content of tooltip
src/pages/components/tooltip/api.ts,参看 Popover 组件,See md-popover component.
src/pages/components/tooltip/examples/simple.html,简单的 Tooltip：,Simple Tooltip:
src/pages/components/tooltip/examples/simple.html,你好，世界！,"Hello, World!"
src/pages/components/tooltip/examples/simple.html,改变 placement 和 delay：,Different placement and delay:
src/pages/components/tooltip/examples/simple.html,通过父组件里的参数控制显示和隐藏：,Used to trigger the visibility of a tooltip.
src/pages/components/tooltip/examples/simple.html,展示自定义的内容：,Show custom html content:
src/pages/components/tooltip/examples/simple.html,编辑,Edit
src/pages/components/tooltip/examples/simple.html,"你好，红色的<span style=""color: red;"">世界</span>！","Hello, red <span style=""color: red;"">World</span>!"
src/pages/components/tooltip/index.html,工具提示,Tooltip
src/pages/components/tooltip/index.html,工具提示用于在鼠标悬停时会展示提示信息，提示信息可能包含有关其功能的简短说明，也可以是更丰富的 HTML 信息。,"Tooltips identify an element when they are activated. They may contain brief helper text about its function. For example, they may contain text information about actionable icons."
src/pages/components/tooltip/index.html,Popover 组件的所有 API 也可用于 Tooltip 组件。但部分属性的默认值不同。,All apis of the Popover component are also available for the Tooltip component. But some properties have different default values.
src/pages/getting-started.html,快速上手,Getting Started
src/pages/getting-started.html,Jinge Material 是构建在 jinge 框架上的 Material Design 组件库，此处假设你已经知道如何搭建基本的 jinge 框架的项目，比如如何在 webpack 中配置和使用 jinge-loader。,"Jinge Material is a Material Design component library built on the jinge framework. It is assumed here that you already know how to build a basic jinge framework project, such as how to configure and use jinge-loader in webpack."
src/pages/getting-started.html,"jinge 框架还处于实验性的阶段，也还几乎没有文档。此处的 Jinge Material 组件库的文档也不保证有效。
      因此，体验 jinge 框架和 Jinge Material 组件库的最佳方式是直接克隆 Jinge Material 的源码仓库。
      这个仓库包含了所有组件的源码，以及一个涵盖所有组件的使用示例的完整应用（也就是你现在看到的这个网站）。","The jinge framework is still experimental, and there is almost no documentation. The documentation for the Jinge Material component library here is also not guaranteed to be valid. Therefore, the best way to experience the jinge framework and Jinge Material component library is to clone Jinge Material's source code repository directly. This repository contains the source code for all components, as well as a complete application that covers all component usage examples (that is, the website you see now)."
src/pages/getting-started.html,安装,Install
src/pages/getting-started.html,要使用 Jinge Material 组件库，需要先通过 npm 或 yarn 的方式安装：,"To use the Jinge Material component library, you need to install it through npm or yarn first:"
src/pages/getting-started.html,配置 Webpack,Config Webapck
src/pages/getting-started.html,在 webpack.config.js 中需要配置使用 jinge 框架提供的模板和组件编译器，并注册相关的组件别名：,"In webpack.config.js, you need to configure the template and component compilers provided by the jinge framework, and register the relevant component aliases:"
src/pages/getting-started.html,使用,Usage
src/pages/getting-started.html,在项目的入口文件中，需要指定组件库默认的语言，并同时引入主题包。,"In the entry file of the project, you need to specify the default language of the component library and import the theme package at the same time."
src/pages/getting-started.html,"Jinge Material 组件库支持多种样式主题和多种语言，但没有默认的样式或语言。因此，只使用一种样式或语言也需要先主动注册资源。
      如果项目需要支持多种主题和语言，参看<router-link to=""i18n"">国际化</router-link>和<router-link to=""theme"">主题</router-link>章节。","Jinge Material component library supports multiple style themes and multiple languages, but there is no default style or language. Therefore, using only one style or language also requires proactive registration of resources. If your project needs to support multiple themes and languages, see the <router-link to=""i18n"">I18N</router-link> and <router-link to=""theme"">Theme</router-link> sections."
src/pages/getting-started.html,在模板 html 文件中，可以直接使用<code>md-[component]</code>这样格式的别名：,"In the template html file, you can directly use the alias in the format of <code>md-[component]</code>:"
src/pages/getting-started.html,在 js/ts 文件中，可直接使用<code>Snackbar</code>等组件：,"In js or ts files, components such as <code>Snackbar</code> can be used directly:"
src/pages/getting-started.html,"需要注意的是，我们推荐引用<code>jinge-material/lib</code>目录下的组件，
      而不是直接从<code>jinge-material</code>中引入，以达到按需引用的目标，加快构建速度。","It should be noted that we recommend referencing the components in the <code>jinge-material/lib</code> directory instead of directly importing them from <code>jinge-material</code>, in order to import on demand and build faster."
src/pages/home/index.html,构建在 Jinge 框架上的 Material Design 组件库,Material Desgin components built on jinge framework
src/pages/home/index.html,快速上手,Getting Started
src/pages/home/index.html,浏览组件,Components
src/pages/home/index.html,精准实现 Google Material Design 设计规范。,Built exactly according to the Google Material Design specs.
src/pages/home/index.html,适配所有主流的现代浏览器，支持移动设备的响应式。,Fit on every screen with support for all modern Web and Mobile Browsers.
src/pages/home/index.html,支持多皮肤主题，国际化多语言等丰富全面的功能。,"Support multi-themes, i18n and more features."
src/pages/home/index.ts,Jinge Material - 构建在 Jinge 框架上的 Material Design 组件库,Jinge Material - Material Desgin components built on jinge framework
src/pages/license.html,许可证,License
src/pages/ui-elements/elevation/apis.ts,名称,Name
src/pages/ui-elements/elevation/apis.ts,描述,Description
src/pages/ui-elements/elevation/apis.ts,为元素添加阴影（Elevation），深度可以是 1、2、3、4、6、8、12、16 或 24，例如：md-elevation-4。,"Add elevation to element, depth can be one of [1, 2, 3, 4, 6, 8, 12, 16, 24], ex. md-elevation-4"
src/pages/ui-elements/elevation/index.html,阴影,Elevation
src/pages/ui-elements/elevation/index.html,"阴影（Elevation）用于指示元素距离表面（Surface）的距离。Material Design 设计规范中定义了 9 种程度的阴影深度，
      依次是 1, 2, 3, 4, 6, 8, 12, 16, 24。Jinge Material 提供了对应的 9 种 class 可供使用：","Elevation is used to indicate how far an element is from the surface. There are 9 levels of shadow depth defined in the Material Design design specifications, in order 1, 2, 3, 4, 6, 8, 12, 16, 24. Jinge Material provides corresponding 9 types of classes to use:"
src/pages/ui-elements/layout/apis.ts,名称,Name
src/pages/ui-elements/layout/apis.ts,描述,Description
src/pages/ui-elements/layout/apis.ts,宽度,Width
src/pages/ui-elements/layout/apis.ts,适用于最大 599px 宽的屏幕，比如大、中、小型人像手机以及纵向的小型平板电脑。,"Applicable to screens that are maximum 599px wide. For small, medium and large handsets in portrait. Also applies to small tablets in portrait."
src/pages/ui-elements/layout/apis.ts,适用于宽度介于 600 像素到 959 像素之间的屏幕，比如中型和大型手机、纵向模式的小型和大型平板电脑以及某些台式机显示器。,Applicable to screens that are between 600px and 959px wide. For medium and large handsets in landscape. For small and large tablets in portrait mode and for some desktop monitors.
src/pages/ui-elements/layout/apis.ts,适用于 960 像素至 1279 像素之间的屏幕，比如横向和台式显示器中的小型和大型平板电脑。,Applicable to screens that are between 960px and 1279px wide. For small and large tablets in landscape and desktop monitors.
src/pages/ui-elements/layout/apis.ts,适用于 1280 像素至 1919 像素之间的屏幕，比如大型台式机显示器。,Applicable to screens that are between 1280px and 1919px wide. For large desktop monitors.
src/pages/ui-elements/layout/apis.ts,适用于宽于 1920 像素的屏幕，比如大型台式机显示器或并排屏幕。,Applicable to screens wider than 1920px. For huge desktop monitors or side-by-side screens.
src/pages/ui-elements/layout/apis.ts,屏幕大小,Screen Size
src/pages/ui-elements/layout/apis.ts,间隙,Gutter Value
src/pages/ui-elements/layout/apis.ts,布局项目之间使用自动计算的间隙。,Enable the automatic gutter space between layout items.
src/pages/ui-elements/layout/apis.ts,默认情况下，布局项目将始终包装在父布局下。 如果要禁用此行为，请使用此类，但是响应性将不起作用。,"By default the layout items will always be wrapped under the parent layout. Use this class if you want to disable this behaviour, but the responsiveness will not work."
src/pages/ui-elements/layout/apis.ts,"设置所有子项的对齐方式，仅当 [x] 和 [y] 同时存在时，对齐方式才有效，例如 <code>md-alignment-top-center</code>。 可能的值包括：<br>
<ul>
  <li>top</li>
  <li>center</li>
  <li>left</li>
  <li>space-around</li>
  <li>space-between</li>
</ul>","Sets the alignment of all children based on a value per coordinate. The alignment only works if both x and y are present e.g. <code>md-alignment-top-center</code>. The possible values are:<br>
<ul>
  <li>top</li>
  <li>center</li>
  <li>left</li>
  <li>space-around</li>
  <li>space-between</li>
</ul>"
src/pages/ui-elements/layout/apis.ts,设置元素的布局大小，按百分比计算，[amount] 可以是 33、66 或 5 的倍数，例如 <code>md-size-25</code>。,"Sets a size to a particular item. The value can be multiples of 5, e.g. <code>md-size-25</code>. Also accepts 33, 66 and 100 for easy prototyping."
src/pages/ui-elements/layout/apis.ts,"设置元素在特定断点下的布局大小，可能的值包括：<br/>
<ul>
  <li>xsmall</li>
  <li>small</li>
  <li>medium</li>
  <li>large</li>
  <li>xlarge</li>
</ul>","Sets a size to a particular item for a particular breakpoint. The breakpoints follow the <a href=""https://material.io/guidelines/layout/responsive-ui.html#responsive-ui-breakpoints"" target=""_blank"">Material Design guidelines</a> for layout. The possible values are:<br/>
<ul>
  <li>xsmall</li>
  <li>small</li>
  <li>medium</li>
  <li>large</li>
  <li>xlarge</li>
</ul>"
src/pages/ui-elements/layout/apis.ts,"设置元素在特定断点下隐藏，可能的值包括：<br/>
<ul>
  <li>xsmall</li>
  <li>small</li>
  <li>medium</li>
  <li>large</li>
  <li>xlarge</li>
</ul>","Hides a particular element for a particular breakpoint. The breakpoints follow the <a href=""https://material.io/guidelines/layout/responsive-ui.html#responsive-ui-breakpoints"" target=""_blank"">Material Design guidelines</a> for layout. The possible values are:<br/>
<ul>
  <li>xsmall</li>
  <li>small</li>
  <li>medium</li>
  <li>large</li>
  <li>xlarge</li>
</ul>"
src/pages/ui-elements/layout/index.html,布局,Layout
src/pages/ui-elements/layout/index.html,Material Design 中的响应式布局可适应任何可能的屏幕尺寸，该布局方案包括一个灵活的网格系统，以确保各个布局之间的一致性。,"Responsive layouts in material design adapt to any possible screen size. This UI guidance includes a flexible grid that ensures consistency across layouts, breakpoints that detail about how the contents reflow on different screens and a description of how an app can scale from small to extra-large screens."
src/pages/ui-elements/layout/index.html,断点,Breakpoints
src/pages/ui-elements/layout/index.html,使用断点来控制响应式布局：,Use breakpoints for responsiveness:
src/pages/ui-elements/layout/index.html,列布局,Column Layout
src/pages/ui-elements/layout/index.html,列布局系统通过 css 的 flexbox 实现，从而提供了灵活而便捷的 API。,The layout system is essentially based on columns and makes use of the flexbox to be flexible enough and thereby gives you the best experience with a great and easy API.
src/pages/ui-elements/layout/index.html,使用布局系统，需要先创建一个<code>md-layout</code>的父元素，然后在其下创建任意数量的<code>md-layout-item</code>列表：,"What you have to do to get started with layouts is to create a<code>md-layout</code>parent element, that will hold a list of<code>md-layout-item</code>. You can set up as many columns as you want using<code>md-layout-item</code>:"
src/pages/ui-elements/layout/index.html,默认情况下，布局项之间没有间隙。可以设置为基于屏幕宽度和断点自动计算元素之间的间距：,"By default layout items do not have space between each other. Regular layouts would rather prefer to have spaces between the layout items, like a list of card, for example. You can set Vue Material to calculate automatically the space between elements and these spaces are based on the screen width, using the breakpoints:"
src/pages/ui-elements/layout/index.html,试试调整浏览器的大小并观察布局变化：,Look at this piece of code and resize your browser to see the changes:
src/pages/ui-elements/layout/index.html,布局列也可用于嵌套布局：,Layout columns also work with nested layouts:
src/pages/ui-elements/layout/index.html,可以指定<code>md-layout</code>使用不同的对齐方式，并可以对<code>md-alignment-[horizontal]-[vertical]</code>类进行水平和垂直对齐的各种组合，例如，<code>md-alignment-top-center</code>。对齐在父元素上起作用，它将更改所有子项的位置：,"You can use layouts for almost anything in your app, even for small parts. To help you with that you can have different alignments for<code>md-layout</code>with various combinations of horizontal and vertical alignments to the<code>md-alignment-[horizontal]-[vertical]</code>class, e.g.<code>md-alignment-top-center</code>. The alignment works on the parent element and it will change the position of all the child items:"
src/pages/ui-elements/layout/index.html,使用<code>md-size-[amount]</code>可以指定元素在布局中的大小，例如<code>md-size-30</code>。其中，[amount] 的值可以是 33、66 或 5 的倍数。,"In the previous examples the layout system did the calculation of the size of the child items based on the no. of items. But if you want to set size for each item, you can simply set the class,<code>md-size-[amount]</code>, to the item that you want, e.g.<code>md-size-30</code>. The size are always in % and the values can be multiple of 5 and also accepts the values 33 and 66."
src/pages/ui-elements/layout/index.html,不是所有元素都必须指定布局大小。对于没有指定大小的元素，会自动计算其大小：,"You don't even need to set the size for all elements, as the flexbox model will calculate the size for the remaining items. Cool, uh?"
src/pages/ui-elements/layout/index.html,使用<code>md-[breakpoint]-size-[amount]</code>可以基于断点来更改布局大小。尝试调整浏览器的大小：,"A layout system is not good enough if it is not responsive. In the last example you saw fluid layout sizes, but you can change them based on the breakpoint name, by just giving a different class for each breakpoint that you may want. The class is<code>md-[breakpoint]-size-[amount]</code>and works just like the last example. The layout engine of Vue Material will do the magic. Try to resize your browser:"
src/pages/ui-elements/layout/index.html,可以使用<code>md-[breakpoint]-hide</code>类来实现在较小屏幕上隐藏某个元素：,"Although this is not the best option, it is quite common to hide elements on smaller screen. You can do that using the<code>md-[breakpoint]-hide</code>classes:"
src/pages/ui-elements/layout/index.html,以下类可以被应用到任何 HTML 元素上：,The following classes can be applied to any HTML Element:
src/pages/ui-elements/layout/index.html,以下类可以应用于任何<code>md-layout</code>的直接子元素：,The following classes can be applied to any HTML Element that are direct children of<code>md-layout</code>:
src/pages/ui-elements/states/apis.ts,名称,Name
src/pages/ui-elements/states/apis.ts,描述,Description
src/pages/ui-elements/states/apis.ts,对应 Material Design States 规范里的 Container，指定状态的容器层。,Corresponds to the Container in the Material Design States specification and specifies the container layer for the state.
src/pages/ui-elements/states/apis.ts,对应 Material Design States 规范里的 Overlay，指定状态的悬停层。,"Corresponds to the Overlay in the Material Design States specification, the hover layer of the specified state."
src/pages/ui-elements/states/apis.ts,对应 Material Design States 规范里的 Content，指定状态的内容层。,"Corresponds to Content in the Material Design States specification, specifying the content layer of the state."
src/pages/ui-elements/states/apis.ts,指定使用设计规范里的 Content: On Surface 类型。,Specifies to use the Content: On Surface type from the design specification.
src/pages/ui-elements/states/apis.ts,指定使用设计规范里的 Content: Primary 类型。,Specifies to use the Content: Primary type from the design specification.
src/pages/ui-elements/states/apis.ts,指定使用设计规范里的 Content: On Primary 类型。,Specifies to use the Content: On Primary type from the design specification.
src/pages/ui-elements/states/index.html,状态,States
src/pages/ui-elements/states/index.html,状态包括悬停，点击，焦点，禁用等情况下的交互响应。Material Design 使用 Content/Overlay/Container 三层模型来统一了状态的设计。,"The status includes interactive responses under hover, click, focus, disable, etc. Material Design uses a three-layer model of Content / Overlay / Container to unify the design of states."
src/pages/ui-elements/typography/apis.ts,名称,Name
src/pages/ui-elements/typography/apis.ts,描述,Description
src/pages/ui-elements/typography/apis.ts,对应于 Material Design 设计规范中的 Headline 1 样式。,Corresponds to the headline-1 style in the Material Design specification.
src/pages/ui-elements/typography/apis.ts,对应于 Material Design 设计规范中的 Headline 2 样式。,Corresponds to the headline-2 style in the Material Design specification.
src/pages/ui-elements/typography/apis.ts,对应于 Material Design 设计规范中的 Headline 3 样式。,Corresponds to the headline-3 style in the Material Design specification.
src/pages/ui-elements/typography/apis.ts,对应于 Material Design 设计规范中的 Headline 4 样式。,Corresponds to the headline-4 style in the Material Design specification.
src/pages/ui-elements/typography/apis.ts,对应于 Material Design 设计规范中的 Headline 5 样式。,Corresponds to the headline-5 style in the Material Design specification.
src/pages/ui-elements/typography/apis.ts,对应于 Material Design 设计规范中的 Headline 6 样式。,Corresponds to the headline-6 style in the Material Design specification.
src/pages/ui-elements/typography/apis.ts,对应于 Material Design 设计规范中的 Subtitle 1 样式。,Corresponds to the subtitle-1 style in the Material Design specification.
src/pages/ui-elements/typography/apis.ts,对应于 Material Design 设计规范中的 Subtitle 2 样式。,Corresponds to the subtitle-2 style in the Material Design specification.
src/pages/ui-elements/typography/apis.ts,对应于 Material Design 设计规范中的 Body 1 样式。,Corresponds to the body-1 style in the Material Design specification.
src/pages/ui-elements/typography/apis.ts,对应于 Material Design 设计规范中的 Body 2 样式。,Corresponds to the body-2 style in the Material Design specification.
src/pages/ui-elements/typography/apis.ts,对应于 Material Design 设计规范中的 Caption 样式。,Corresponds to the caption style in the Material Design specification.
src/pages/ui-elements/typography/index.html,版式,Typography
src/pages/ui-elements/typography/index.html,字体,Font Family
src/pages/ui-elements/typography/index.html,"Material Design 设计规范里的英文字体为 Roboto，推荐使用 Google Fonts 来加载字体资源。
      你需要在 html 的头里，加入以下的代码：","The English font in the Material Design design specification is Roboto, and it is recommended to use Google Fonts to load font resources. You need to add the following code in the html header:"
src/pages/ui-elements/typography/index.html,"当没有加载 Roboto 字体文件，或遇到 Roboto 字体未涵盖的字符（比如中文字符），
      会倒退到使用<a href=""https://ant.design/docs/spec/font"" target=""_blank"">Ant Desgin</a>里指定的兼容性字体列表：","When Roboto font files are not loaded, or when characters not covered by Roboto fonts (such as Chinese characters) are encountered, they will fallback to using<a href=""https://ant.design/docs/spec/font"" target=""_blank"">fonts specified in ant-desgin</a>:"
src/pages/ui-elements/typography/index.html,文字样式,Font Style
src/pages/ui-elements/typography/index.html,"Material Desgin 设计规范约束了可以使用的文字样式（包括字号、粗细和行距）。
      Jinge Material 提供了这几类样式的 class 可供使用：","Material Design specifications constrain the available text styles (including font size, weight, and line spacing). Jinge Material provides these types of classes for use:"
